<h2>DESCRIPTION</h2>


<p><em>r.cost</em> determines the cumulative cost of moving to each
cell on a <em>cost surface</em> (the <b>input</b> raster map) from
other user-specified cell(s) whose locations are specified by their
geographic coordinate(s). Each cell in the original cost surface map
will contain a category value which represents the cost of traversing
that cell. <em>r.cost</em> will produce 1) an <b>output</b> raster map in
which each cell contains the lowest total cost of traversing the
space between each cell and the user-specified points (diagonal
costs are multiplied by a factor that depends on the dimensions of
the cell) and 2) a second raster map layer showing the movement 
direction to the next cell on the path back to the start point (see 
<a href="#move">Movement Direction</a>). This program uses the current geographic region settings.
The <b>output</b> map will be of the same data format as the <b>input</b>
map, integer or floating point.

<h2>OPTIONS</h2>

The <b>input</b> <em>name</em> is the name of a raster map whose category values
represent the surface cost. The <b>output</b> <em>name</em> is the name of the
resultant raster map of cumulative cost. The <b>outdir</b> <em>name</em> is the 
name of the resultant raster map of movement directions (see <a href="#move">Movement Direction</a>).

<p>
<em>r.cost</em> can be run with three different methods of identifying the
starting point(s). One or more points (geographic coordinate pairs) can be
provided as specified <b>coordinate</b>s on the command line, from a vector
points file, or from a raster map.
All non-NULL cells are considered to be starting points.

Each <em>x,y</em> <b>coordinate</b> pair gives the geographic location of a
point from which the transportation cost should be figured. As many points as
desired can be entered by the user. These starting points can also be read
from a vector points file through the <b>start_points</b> option or from a
raster map through the <b>start_rast</b> option.
<p>
<em>r.cost</em> will stop cumulating costs when either <b>max_cost</b> is reached,
or one of the stop points given with <b>stop_coordinates</b> is reached.
Alternatively, the stop points can be read from a vector points file with the
<b>stop_points</b> option. During execution, once the cumulative cost to all 
stopping points has been determined, processing stops.

Both sites read from a vector points file and those given on the command line
will be processed.


<p>
The null cells in the <b>input</b> map can be assigned a (positive floating
point) cost with the <b>null_cost</b> option.
<br>
When input map null cells are given a cost with the <b>null_cost</b>
option, the corresponding cells in the output map are no longer null
cells. By using the <b>-n</b> flag, the null cells of the input map are
retained as null cells in the output map.

<p>
As <em>r.cost</em> can run for a very long time, it can be useful to 
use the <b>-v</b> verbose flag to track progress.

<p>
The Knight's move (<b>-k</b> flag) may be used to improve the accuracy of
the output. In the diagram below, the center location (<tt>O</tt>) represents a
grid cell from which cumulative distances are calculated. Those
neighbors marked with an <tt>X</tt> are always considered for cumulative cost
updates. With the <b>-k</b> option, the neighbors marked with a <tt>K</tt> are
also considered. 

<div class="code"><pre>
 . . . . . . . . . . . . . . .
 .   .   . K .   . K .   .   .
 . . . . . . . . . . . . . . .
 .   . K . X . X . X . K .   .
 . . . . . . . . . . . . . . .
 .   .   . X . O . X .   .   .
 . . . . . . . . . . . . . . .
 .   . K . X . X . X . K .   .
 . . . . . . . . . . . . . . .
 .   .   . K .   . K .   .   .
 . . . . . . . . . . . . . . .
</pre></div>
<br>
Knight's move example:
<center>
<img src=rcost_knightsmove.png border=1><br>
<table border=0 width=590>
<tr><td><center>
<i>Flat cost surface without (left pane) and with the knight's move (right pane).
The default is to grow the cost outwards in 8 directions.
Using the knight's move grows it outwards in 16 directions.</i>
</center></td></tr>
</table>
</center>


<h2>NULL CELLS</h2>

<p>By default null cells in the input raster map are excluded from
the algorithm, and thus retained in the output map.
<p>
If one wants <b>r.cost</b> to transparently cross any region of null cells,
the <b>null_cost</b>=<tt>0.0</tt> option should be used. Then null cells just
propagate the adjacent costs. These cells can be retained as null cells in the
output map by using the <b>-n</b> flag.

<h2>NOTES</h2>

<p>Sometimes, when the differences among integer cell category values in the
<em>r.cost</em> cumulative cost surface output are small, this
cumulative cost output cannot accurately be used as input to <em><a href="r.drain.html">r.drain</a></em>
(<em><a href="r.drain.html">r.drain</a></em> will output bad
results). This problem can be circumvented by making the differences
between cell category values in the cumulative cost output bigger. It
is recommended that, if the output from <em>r.cost</em> is to be used
as input to <em><a href="r.drain.html">r.drain</a></em>, the user
multiply the input cost surface map to <em>r.cost</em> by the value
of the map's cell resolution, before running <em>r.cost</em>. This
can be done using <em><a href="r.mapcalc.html">r.mapcalc</a></em>. The map 
resolution can be found using <em><a href="g.region.html">g.region</a></em>.
This problem doesn't arise with floating point maps.


<h3>Algorithm notes</h3>

The fundamental approach to calculating minimum travel cost is as
follows:<p> The user generates a raster map indicating the cost of
traversing each cell in the north-south and east-west directions.
This map, along with a set of starting points are submitted to
<em>r.cost</em>. The starting points are put into a list cells from which
costs to the adjacent cells are to be calculated. The cell on the
list with the lowest cumulative cost is selected for computing costs to
the neighboring cells. Costs are computed and those cells are put
on the list and the originating cell is finalized. This process
of selecting the lowest cumulative cost cell, computing costs to the
neighbors, putting the neighbors on the list and removing the
originating cell from the list continues until the list is empty.
<p>
The most time consuming aspect of this algorithm is the management of
the list of cells for which cumulative costs have been at least
initially computed. <em>r.cost</em> uses a binary tree with an linked list
at each node in the tree for efficiently holding cells with identical
cumulative costs.
<p>
<em>r.cost</em>, like most all GRASS raster programs, is also made to be run on
maps larger that can fit in available computer memory. As the
algorithm works through the dynamic list of cells it can move almost
randomly around the entire area. <em>r.cost</em> divides the entire area
into a number of pieces and swaps these pieces in and out of memory (to
and from disk) as needed. This provides a virtual memory approach
optimally designed for 2-D raster maps.
The amount of map to hold in memory at one time can be controlled with the
<b>percent_memory</b> option. For large maps this value will have to be set
to a lower value.


<h2>EXAMPLES</h2>

<p>Consider the following example: 

<div class="code"><pre>
       Input:
         COST SURFACE
       . . . . . . . . . . . . . . .
       . 2 . 2 . 1 . 1 . 5 . 5 . 5 .
       . . . . . . . . . . . . . . .
       . 2 . 2 . 8 . 8 . 5 . 2 . 1 .
       . . . . . . . . . . . . . . .
       . 7 . 1 . 1 . 8 . 2 . 2 . 2 .
       . . . . . . . . . . . . . . .
       . 8 . 7 . 8 . 8 . 8 . 8 . 5 .
       . . . . . . . . . . _____ . .
       . 8 . 8 . 1 . 1 . 5 | <b>3</b> | 9 .
       . . . . . . . . . . |___| . .
       . 8 . 1 . 1 . 2 . 5 . 3 . 9 .
       . . . . . . . . . . . . . . .


Output (using -k):                Output (not using -k):
   CUMULATIVE COST SURFACE           CUMULATIVE COST SURFACE
 . . . . . . . . . . . . . . .     . . . . <b>* * * * *</b> . . . . . .
 . 21. 21. 20. 19. 17. 15. 14.     . 22. 21<b>* 21* 20*</b> 17. 15. 14.
 . . . . . . . . . . . . . . .     . . . . <b>* * * * *</b> . . . . . .
 . 20. 19. 22. 19. 15. 12. 11.     . 20. 19. 22<b>* 20*</b> 15. 12. 11.
 . . . . . . . . . . . . . . .     . . . . . . <b>* * * * *</b> . . . .
 . 22. 18. 17. 17. 12. 11.  9.     . 22. 18. 17<b>* 18* 13*</b> 11.  9.
 . . . . . . . . . . . . . . .     . . . . . . <b>* * * * *</b> . . . .
 . 21. 14. 13. 12.  8.  6.  6.     . 21. 14. 13. 12.  8.  6.  6.
 . . . . . . . . . .  _____. .     . . . . . . . . . . . . . . .
 . 16. 13.  8.  7.  4 | <b>0</b> | 6.     . 16. 13.  8. 7 .  4.  0.  6.
 . . . . . . . . . .  |___|. .     . . . . . . . . . . . . . . .
 . 14.  9.  8.  9.  6.  3.  8.     . 14.  9.  8. 9 .  6.  3.  8.
 . . . . . . . . . . . . . . .     . . . . . . . . . . . . . . .
</pre></div>

<p>
<!-- ??? are "starting" and "ending" swapped in the following text ??? -->
The user-provided ending location in the above example is the boxed <b>3</b>
in the above input map. The costs in the output map represent the total
cost of moving from each box (&quot;cell&quot;) to one or more (here,
only one) starting location(s). Cells surrounded by asterisks are
those that are different between operations using and not using the
Knight's move (<b>-k</b>) option.

<h3>Output analysis</h3>

The output map can be viewed, for example, as an elevation model in which
the starting location(s) is/are the lowest point(s). Outputs from  <em>r.cost</em>
can be used as inputs to <em><a href="r.drain.html">r.drain</a></em> with
the direction flag <b>-d</b>, in order to trace the least-cost path given by this 
model between any given cell and the <em>r.cost</em> starting location(s). The 
two programs, when used together, generate least-cost paths or corridors between any 
two map locations (cells).

<h3>Shortest distance surfaces</h3>
The <em>r.cost</em> module allows for computing the shortest distance 
of each pixel from raster lines, such as determining the shortest distances
of households to the nearby road. For this cost surfaces with cost value 1 are
used. The calculation is done with <em>r.cost</em> as follows
(example for Spearfish region):

<div class="code"><pre>
  g.region rast=roads -p
  r.mapcalc "area.one = 1"
  r.cost -k input=area.one output=distance start_rast=roads
  d.rast distance
  d.rast.num distance

  #transform to metric distance from cell distance using the raster resolution:
  r.mapcalc "dist_meters = distance * (ewres()+nsres())/2."
  d.rast dist_meters
</pre></div>

<a name="move"></a>
<h2>Movement Direction</h2>
<p>
The movement direction surface is created to record the sequence of
movements that created the cost accumulation surface. Without it 
<em>r.drain</em> would not correctly create a path from an end point 
back to the start point. The direction shown in each cell points <b>away</b> 
from the cell that came before it. The directions are recorded as
GRASS standard directions:<div class="code"><pre>
       112.5 90  67.5         i.e. a cell with the value 135 
157.5  135   0   45   22.5    means the cell <b>before</b> it is 
       180   x   0            to the south-east.
202.5  225  270  315  337.5
       247.5     292.5
</pre></div>
<p>
Once <em>r.cost</em> computes the cumulative cost map, <em>r.drain</em>
can be used to find the minimum cost path. Make sure to use the <b>-d</b> flag
and the movement direction raster map when running r.drain to ensure
the path is computed according to the proper movement directions.

<h2>BUGS</h2>

The percentage done calculation reported in verbose mode is often not linear
and ends well before 100%. This does not affect output.


<h2>SEE ALSO</h2>

<em><a href="r.drain.html">r.drain</a></em>,
<em><a href="r.walk.html">r.walk</a></em>,
<em><a href="r.in.ascii.html">r.in.ascii</a></em>,
<em><a href="r.mapcalc.html">r.mapcalc</a></em>,
<em><a href="r.out.ascii.html">r.out.ascii</a></em>

<h2>AUTHOR</h2>

Antony Awaida,<br>
Intelligent Engineering<br>
Systems Laboratory,<br>
M.I.T.<br>
<br>
James Westervelt,<br>
U.S.Army Construction Engineering Research Laboratory

<p>Updated for Grass 5<br>
Pierre de Mouveaux (pmx@audiovu.com) 


<p><i>Last changed: $Date$</i>
