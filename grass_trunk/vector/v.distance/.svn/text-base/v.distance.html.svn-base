<h2>DESCRIPTION</h2>

<em>v.distance</em> finds the nearest element in vector map
(<em>to</em>) for elements in vector map (<em>from</em>). Various
information about the vectors' relationships (distance, category, etc.) may be uploaded
to the attribute table attached to the first vector map, or printed to
'stdout'.  A new vector map may be created where lines connecting
nearest points on features are written. <em>dmin</em> and/or <em>dmax</em> can be used to limit the search radius.

<h2>NOTES</h2>

If a nearest feature does not have a category, the attribute column is updated
to <em>null</em>.  This is true also for areas, which means for example,
that if a point is in an island (area WITHOUT category), <em>v.distance</em> 
does not search for the nearest area WITH category; the island is identified 
as the nearest and category updated to null.
<p>
The upload <em>column</em>(s) must already exist. Create one with <em>v.db.addcolumn</em>.
<p>
In lat-long locations <em>v.distance</em> gives distances (<em>dist</em>
and <em>to_along</em>) in meters not in degrees calculated as geodesic
distances on a sphere.

<h2>EXAMPLES</h2>

<H3>Find nearest lines</H3>

Find <em>nearest lines</em> in vector map <b>ln</b> for points from
vector map <b>pnt</b> within the given threshold and write related
line categories to column <b>linecat</b> in an attribute table attached
to vector map <b>pnt</b>:

<div class="code"><pre>
v.distance from=pnt to=ln upload=cat column=linecat
</pre></div>

<H3>Find nearest area</H3>

For each point from vector map <b>pnt</b>, find the <em>nearest area</em>
from map <b>ar</b> within the given threshold and write the related
area categories to column <b>areacat</b> in an attribute table attached
to vector map <b>pnt</b> (in the case that a point falls into a polygon area,
the distance is zero):

<div class="code"><pre>
v.distance from=pnt to=ar upload=cat column=areacat
</pre></div>

<H3>Create a new vector map</H3>

Create a new vector map which contains <em>lines connecting nearest
features</em> of maps <b>pnt</b> and map <b>ln</b>. The resulting
vector map can be used for example to connect points to a network as
needed for network analysis:

<div class="code"><pre>
v.distance -p from=pnt to=ln out=connections upload=dist column=dist
</pre></div>

<H3>Query information</H3>

Query information from selected point(s). <em>v.distance</em> takes
points from a vector map as input instead of stdin. A new vector map
with query points has to be created before the map can be analysed.
<p>

Create query map (if not present):

<div class="code"><pre>
echo "123456|654321|1" | v.in.ascii output=pnt
</pre></div>

Find nearest features:

<div class="code"><pre>
v.distance from=pnt to=map_to_query upload=cat col=somecol -p
</pre></div>

<H3>Point-in-polygon</H3>

The option <em>dmax=0</em> is here important because otherwise for
points not falling into any area, the category of the nearest area is
recorded.
<br>
For each point from vector map <b>pnt</b>, find the <em>area</em> from
vector map <b>ar</b> in which the individual point falls, and
write the related area categories to column <b>areacat</b> into
the attribute table attached to vector map <b>pnt</b>:

<div class="code"><pre>
v.distance from=pnt to=ar dmax=0 upload=cat column=areacat
</pre></div>

<H3>Univariate statistics on results</H3>

Create a vector map containing connecting lines and investigate mean
distance to targets. An alternative solution is to use
the <tt>v.distance upload=dist</tt> option to upload distances into
the <i>bugs</i> vector directly, then run v.univar on that. Also note
you can upload two columns at a time, e.g. <tt>v.distance
upload=cat,dist column=nearest_id,dist_to_nr</tt>.

<div class="code"><pre>
# create working copy
g.copy vect=bugsites,bugs

# add new attribute column to hold nearest archsite category number
v.db.addcolumn map=bugs column="nrst_arch INTEGER"

v.distance from=bugs to=archsites to_type=point upload=to_attr \
  to_column=cat column=nrst_arch out=vdistance_vectors_raw

# we need to give the lines category numbers, create a table, and create
#  a column in that table to hold the distance data.
v.category vdistance_vectors_raw out=vdistance_vectors type=line op=add
g.remove v=vdistance_vectors_raw

v.db.addtable map=vdistance_vectors column="length DOUBLE"
v.to.db map=vdistance_vectors option=length column=length

# calculcate statistics. Use v.univar.sh for extended statistics.
v.univar vdistance_vectors column=length
</pre></div>

<H3>Print distance matrix</H3>

<div class="code"><pre>
v.distance -pa from=archsites to=archsites upload=dist col=dist
</pre></div>

Note: Matrix-like output is enabled only for flag <em>-a</em> and one
given upload option.

<h2>SEE ALSO</h2>

<em>
<a href="r.distance.html">r.distance</a>,
<a href="v.db.addcolumn.html">v.db.addcolumn</a>,
<a href="v.what.vect.html">v.what.vect</a>
</em>


<h2>AUTHOR</h2>

Janne Soimasuo 1994, University of Joensuu, Faculty of Forestry, Finland<br>
Cmd line coordinates support: Markus Neteler, ITC-irst, Trento, Italy<br>
Updated for 5.1: Radim Blazek, ITC-irst, Trento, Italy<br>
Matrix-like output by Martin Landa, FBK-irst, Trento, Italy<br>
Improved processing speed: Markus Metz

<p><i>Last changed: $Date$</i>
