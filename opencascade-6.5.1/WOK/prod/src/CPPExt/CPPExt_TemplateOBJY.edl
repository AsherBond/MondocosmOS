-- File:	CPPExt_TemplateOBJY.edl
-- Author:	Kernel
-- History:	Thu Dec 21 08:27:18 1995	Kernel	Creation
-- Copyright:	 Matra Datavision 1995

-- =================================
-- extraction of a persistent handle
-- =================================

@template HandlePersistentOBJY(%HPName,%HPName,%HPInherits) is
$// This file is generated by WOK (CPPExt).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$//
$#ifndef Handle_%HPName_HeaderFile
$#define Handle_%HPName_HeaderFile
$#define %HPNameType %HPName_Type_()
$
$#ifndef _Handle_%HPInherits_HeaderFile
$#include <Handle_%HPInherits.hxx>
$#endif
$
$class Oid_%HPName;
$class %HPName;
$class PHandle_%HPName;
$
$class Handle_%HPName: public Handle_%HPInherits {
$
$public:
$
$ Handle_%HPName(const PHandle_Standard_Persistent& AnObject) : Handle_%HPInherits(AnObject) {}
$ Handle_%HPName();
$ Handle_%HPName(const Handle_%HPName& AnObject);
$ Handle_%HPName(const %HPName* AnObject);
$ ~Handle_%HPName();
$ Handle_%HPName& operator=(const Handle_%HPName& AnObject);
$ Handle_%HPName& operator=(const %HPName* AnObject);
$ static const Handle_%HPName DownCast(const Handle_Standard_Persistent&);
$ Standard_Boolean   operator==(const Handle_%HPName& AnObject) const ;
$ Standard_Boolean operator!=(const Handle_%HPName& AnObject) const;
$ Oid_%HPName* operator->() const;
$};
$
$class PHandle_%HPName : public  PHandle_%HPInherits {
$ public:
$  PHandle_%HPName(){}
$  PHandle_%HPName (const Handle_%HPName& aHandle) : PHandle_%HPInherits(aHandle){}
$  Handle(%HPName) operator->(){Handle(%HPName) p(*this);return p;}
$  Handle(%HPName) operator->() const {Handle(%HPName) p(*this);return p;}
$};
$
$Handle_%HPName::Handle_%HPName()
${
$}
$
$Handle_%HPName::Handle_%HPName(const Handle_%HPName& AnObject) 
$ : Handle_%HPInherits(AnObject)
${
$}
$
$Handle_%HPName::Handle_%HPName(const %HPName* AnObject) 
$ : Handle_%HPInherits((const %HPInherits*)AnObject)
${
$}
$
$Handle_%HPName& Handle_%HPName::operator=(const Handle_%HPName& AnObject) 
${
$  Identifier=AnObject.Identifier; return *this;
$}
$
$Standard_Boolean Handle_%HPName::operator==(const Handle_%HPName& AnObject)const 
${
$  return Identifier==AnObject.Identifier;
$}
$
$Standard_Boolean Handle_%HPName::operator!=(const Handle_%HPName& AnObject)const 
${
$  return Identifier!=AnObject.Identifier;
$}
$
$Oid_%HPName* Handle_%HPName::operator->() const 
${
$  return (Oid_%HPName*)(void*)&(((Handle_%HPName *)this)->Identifier);
$}
$
$#endif
@end;

@template PersistentOBJYInstClass(%Class,
				  %Inherits,
                                  %TICIncludes,
                                  %TICPublicfriends,
                                  %TICOidpubMet,
                                  %TICOidproMet,
                                  %TICOidpriMet,
                                  %TICPublicmets,
                                  %TICPublicfriends,
                                  %TICProtectedmets,
                                  %TICProtectedfields,
                                  %TICPrivatemets,
                                  %TICPrivatefields,
                                  %TICPrivatefriends,
                                  %TICDefines,
                                  %TICInlineIncludes,
                                  %TICUndefines,
                                  %TICSuppMethod) is
$// This file is generated by WOK (CPPExt).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$//
$#ifndef _%Class_HeaderFile
$#define _%Class_HeaderFile
$
$#ifndef _Handle_%Class_HeaderFile
$#include <Handle_%Class.hxx>
$#endif
$
$%TICIncludes
$#ifndef _Standard_ImmutableObject_HeaderFile
$#include <Standard_ImmutableObject.hxx>
$#endif
$
$class Oid_%Class : public Oid_%Inherits {
$
$friend class %Class;
$%TICPublicfriends
$
$public:
$
$%TICOidpubMet 
$Oid_%Class() {};
$~Oid_%Class() {};
$
$protected:
$
$%TICOidproMet
$
$private:
$
$%TICOidpriMet 
$};
$
$class %Class : public %Inherits {
$
$friend class Oid_%Class;
$
$public:
$
$ // Methods PUBLIC
$ // 
$%TICPublicmets
$
$%TICPublicfriends
$
$ // Type management
$ //
$ friend Handle_Standard_Type& %Class_Type_();
$ const Handle(Standard_Type)& DynamicType() const;
$ Standard_Boolean	       IsKind(const Handle(Standard_Type)&) const;
$ void* operator new(size_t);
$
$protected:
$
$ // Methods PROTECTED
$ // 
$%TICProtectedmets
$
$ // Fields PROTECTED
$ //
$%TICProtectedfields
$
$private: 
$
$ // Methods PRIVATE
$ // 
$%TICPrivatemets
$
$ // Fields PRIVATE
$ //
$%TICPrivatefields
$%TICPrivatefriends
$};
$
$%TICDefines
$%TICInlineIncludes
$%TICUndefines
$
$// other Inline functions and methods (like "C++: function call or Oid methods" methods)
$//
$%TICSuppMethod
$
$#endif
@end;

@template PersistentOBJYIxx(%Class,%Suffix,%Supplement,%TypeMgt,%Methods) is
$// This file is generated by WOK (CPPExt).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$//
$#include <%Class.%Suffix>
$
$#ifndef _Standard_TypeMismatch_HeaderFile
$#include <Standard_TypeMismatch.hxx>
$#endif
$
$%Supplement 
$
$%TypeMgt
$
$ // new operator
$ //
$ void* %Class::operator new (size_t ASize) 
$ {
$   Standard_Container _aContainer = PreNew();
$   return (opiNewObj(ASize,ooTypeN(%Class),_aContainer));
$ }
$
$ Handle_%Class& Handle_%Class::operator=(const %Class* AnObject) 
$ {
$   Identifier = AnObject; 
$   return *this;
$ }
$
$%Methods
@end;

@template ImmutableTestOBJY(%DName,%MethodName) is
$  if (%DName.IsImmutable()) Standard_ImmutableObject::Raise("Immutable object handle in %MethodName");
@end;

@template UpdateAccessOBJY(%Class,%MethodName) is
$ ((%Class *)UpdateAccess())->%MethodName;
@end;

@template ReadAccessOBJY(%Class,%MethodName) is
$ ((%Class *)ReadAccess())->%MethodName;
@end;


@template ItemMDTVDefine(%DName,%DValue) is
$//MDTV#define %DName %DValue
$//MDTV#define %DName_hxx <%DValue.hxx>
@end;

@template ItemMDTVConstraintHandle(%DName,%DValue) is
$//MDTV#define Handle_%DName Handle_%DValue
@end;

@template ItemMDTVConstraintHandleUndef(%DName) is
$//MDTV#undef Handle_%DName
@end;

@template ItemHandleMDTVDefine(%DName,%DValue) is
$//MDTV#define Handle_%DName Handle_%DValue
$//MDTV#define %DName_Type_() %DValue_Type_()
@end;

@template ItemMDTVUndefine(%DName) is
$//MDTV#undef %DName
$//MDTV#undef %DName_hxx
@end;

@template ItemHandleMDTVUndefine(%DName) is
$//MDTV#undef Handle_%DName
$//MDTV#undef %DName_Type_
@end;

@template IncludeMDTVNoSafe(%IClass,%Suffix) is
$//MDTV#include <%IClass.%Suffix>
@end;

@template VArrayDeclareOBJY(%DName,%DValue) is
$#ifdef OBJY
$
$#include <oo.h>
$#include <ooVArray.h>
$
$typedef %DValue %DName_%DValue;
$declare(ooVArray,%DName_%DValue)
$
$#endif
@end;

@template VArrayFieldOBJY(%DName,%DValue) is
$#ifdef OBJY
$
$ooVArray(%DName_%DValue) myData;
$
$#endif
@end;
