-- File:	Interface_Template.cdl
-- Created:	Thu Dec 21 16:48:50 1995
-- Author:	Kernel
--		<kernel@dekpon>
---Copyright:	 Matra Datavision 1995

--  =====================
--  Header for Interfaces
--  =====================

@template InterfHeader() is
$// This file is generated by WOK (CPPIntExt).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$
$#include <Standard_Macro.hxx>
$class Handle_Standard_Type;
$#include <memory.h>                                
$                                                   
$#include <Standard_PrimitiveTypes.hxx>             
$#include <Standard_ShortReal.hxx>                  
$#include <Standard_ErrorHandler.hxx>               
$#include <Standard_NullObject.hxx>                 
$                                                   
$#include <Engine.hxx>
$#include <Engine_TypeTool.hxx>                              
$#include <Engine_Handle.hxx>                    
$#include <Engine_Signature.hxx>                    
$#include <Engine_Argument.hxx>                     
$#include <Engine_MethodException.hxx>              
$#include <Engine_ExecutionError.hxx>               
$#include <Engine_ArrayOfArguments.hxx>           
$#include <Engine_PArrayOfArguments.hxx>          
$#include <Engine_AVLSearchTreeOfSignature.hxx>     
$
$void Engine_InterfacePlugin::Execute (const Engine_PSignature& ,
$                        const Standard_Address  ) const
${}
$
@end;

--  ================
--  include of class
--  ================

@template InterfPkInclude(%PKName) is
$#include <%PKName.hxx>
@end;

@template InterfClassInclude(%CLName) is
$#ifndef _%CLName_HeaderFile
$#include <%CLName.hxx>
$#endif
@end;

@template InterfNatClassInclude(%CLName) is
$#ifndef _%CLName_HeaderFile
$#include <%CLName.hxx>
$#endif
@end;

--  ===============================
--  Interface Body (Execute method)
--  ===============================


@template InterfExec(%IntName) is
$
$
$extern "C" Standard_EXPORT void %IntName_CallExecute (Engine_InterfacePlugin& anint,
$				                       const Engine_PSignature& aSignature,	
$                               	               const Standard_Address  theObject)
${                                                                           
$  char* ErrMsg = "Error: We have found a method but we can't execute it:";
$                                                                            
$                                                                            
$  static int k_init = 0;
$  if (!k_init) {
$     k_init =1;
$
@end;

@template InterfExecContinue() is
$	return;
$  } 
$  Standard_SStream                   Err;                                   
$  Engine_Handle                     *theHandle;                             
$  Standard_Integer                   theCase = aSignature->MethodId();       
$  Engine_PArrayOfArguments Args = aSignature->PArrayOfArguments();                 
$  Engine_Status                      Eng_Status  = Engine_Succes;           
$  {                                                                         
$    try {                                                                   
$      switch(theCase) {                                                     
@end;

@template InterfMultiExec(%IntName) is
$
$
$extern "C" Standard_EXPORT void %IntName_CallExecute (Engine_InterfacePlugin& anint,
$			                               const Engine_PSignature& aSignature,	
$                                                      const Standard_Address  theObject)
${                                                                           
$  char* ErrMsg = "Error: We have found a method but we can't execute it:";
$                                                                            
$  static int k_init = 0;
$  if (!k_init) {
$     k_init =1;
$
@end;

@template InterfMultiExecContinue() is
$    return;
$  }
$  Standard_SStream                   Err;                                   
$  Engine_Handle                     *theHandle;                             
$  Standard_Integer                   theCase = aSignature->MethodId();       
$  Engine_PArrayOfArguments Args = aSignature->PArrayOfArguments();                 
$  Engine_Status                      Eng_Status  = Engine_Succes;           
$  {                                                                         
$    try {                                                                   
$
@end;


--  =========================
--  Interface Switch Elements
--  =========================


@template InterfCase(%NumCase) is
$	case %NumCase : { 
$
@end;

@template InterfBreak() is
$  	  } break;       
$
@end;

--  ===============
--  Interface Calls
--  ===============


@template InterfArg(%TypArg,%NumArg) is 
$*(%TypArg *)(Args->ChangeValue(%NumArg).Value()) 
@end;

@template InterfHandleArg(%TypArg,%NumArg) is 
$*(Handle(%TypArg) *)(Args->ChangeValue(%NumArg).Value())
@end;

@template InterfConstructor(%CLName,%ArgsConstruc) is
$ %CLName *aHand = new %CLName(%ArgsConstruc);
$ theHandle=new Engine_Handle((Standard_Address)aHand,STANDARD_TYPE(%CLName)); 
$ Engine::Return(*theHandle);                                       
@end;

@template InterfHandleConstructor(%CLName,%ArgsConstruc) is
$ Handle(%CLName) aHand = new %CLName(%ArgsConstruc);
$ theHandle = new Engine_Handle(aHand,STANDARD_TYPE(%CLName));
$ Engine::Return(*theHandle);                                 
@end;

@template InterfClassMethodBody(%CLName,%MetName,%ArgsMet) is
$%CLName::%MetName(%ArgsMet)
@end;

@template InterfInstMethodBody(%CLName,%MetName,%ArgsMet) is
$((%CLName *) theObject)->%MetName(%ArgsMet)
@end;

@template InterfInstMethodHandleBody(%CLName,%MetName,%ArgsMet) is
$(* ((Handle(%CLName) *) theObject))->%MetName(%ArgsMet)
@end;

@template InterfNewEHHandle(%TextEngineHandle,%CLName) is
$theHandle = new Engine_Handle(%TextEngineHandle,STANDARD_TYPE(%CLName));
$Engine::Return(*theHandle);
@end;

@template InterfNewEHRef(%TextEngineHandle,%CLName) is
$const %CLName& aRet = %TextEngineHandle;
$theHandle = new Engine_Handle((Standard_Address) &aRet,STANDARD_TYPE(%CLName),Standard_False);
$Engine::Return(*theHandle);
@end;

@template InterfNewEHMagic(%TextEngineHandle,%CLName) is
$%CLName *aRet = new %CLName(%TextEngineHandle);
$theHandle = new Engine_Handle((Standard_Address) aRet,STANDARD_TYPE(%CLName));
$Engine::Return(*theHandle);
@end;

@template InterfNewEHEmpty(%TextEngineHandle,%CLName) is
$%CLName *aRet = new %CLName();
$*aRet = %TextEngineHandle;
$theHandle = new Engine_Handle((Standard_Address) aRet,STANDARD_TYPE(%CLName));
$Engine::Return(*theHandle);
@end;

@template InterfNewEHMalloc(%TextEngineHandle,%CLName) is
$%CLName *aRet = ((%CLName *) malloc(sizeof(%CLName)));
$*aRet = %TextEngineHandle;
$theHandle = new Engine_Handle((Standard_Address) aRet,STANDARD_TYPE(%CLName));
$Engine::Return(*theHandle);
@end;

@template InterfEngineOutArg(%Arg,%Pos) is
$Engine::Return(%Arg,%Pos);
@end;

@template InterfEngineOutArgEnum(%Arg,%Pos) is
$Engine::Return((Standard_Integer) %Arg,%Pos);
@end;

@template InterfEngineReturn(%TextEngineHandle) is
$Engine::Return(%TextEngineHandle);
@end;

@template InterfEngineReturnEnum(%TextEngineHandle) is
$Engine::Return((Standard_Integer) %TextEngineHandle);
@end;

--  =========================
--  Interface Multi-Case Call
--  =========================


@template InterfMultiFuncCall(%IntName, %NumCaseFunc) is
$
$static void %IntName_Execute_%NumCaseFunc(const Standard_Integer theCase,
$                                   Engine_PArrayOfArguments& Args,
$                                   const Standard_Address theObject)
${
$  Engine_Handle                     *theHandle;                             
$
$ switch(theCase) {
$
@end;  

@template InterfMultiFuncEndCall() is
$ }
$}
$
@end;

@template InterfMultiCaseCall(%IntName, %NumCaseFunc, %NumCaseFirst, %NumCaseLast) is
$
$ if ((theCase >= %NumCaseFirst) && (theCase < %NumCaseLast)) {
$    %IntName_Execute_%NumCaseFunc(theCase,Args,theObject);
$ }
$
@end;	

--  ================
--  Interface Bottom
--  ================


@template InterfBottom() is
$                                                              
$	default:                                                            
$          Err << ErrMsg; aSignature->Display(Err);  Err << (char) 0;         
$	  Engine::Return(GetSString(Err),-1);                            
$          Eng_Status = Engine_Error;                                        
$	  break;                                                            
$      }                                                                     
$                                                                            
$    } 
$    catch(Standard_Failure) {                                             
$#ifdef OBJS                                            
$      os_transaction* curTrans = os_transaction::get_current();
$      if (curTrans) os_transaction::abort_top_level ();
$#endif
$      Err << "Exception: ";                                               
$      aSignature->Display(Err);                                              
$      Err << ": raises the exception: "                                   
$          <<Standard_Failure::Caught();                                     
$      Err << (char) 0;                                                      
$      Engine::Return(GetSString(Err),-1);                                
$      Eng_Status = Engine_Exception;                                        
$    }                                                                       
$  }                                                                         
$                                                                            
$  switch(Eng_Status) {                                                      
$    case Engine_Exception:Engine_MethodException::Raise(GetSString(Err));
$    case Engine_Error    :Engine_ExecutionError::Raise(GetSString(Err)); 
$    default:
$      break;	
$  }                                                                         
$}                                                                           
@end;

@template InterfMultiBottom(%IntMaxCase) is
$                                                              
$      if ((theCase <= 0)  || (theCase >= %IntMaxCase)) {                                               
$          Err << ErrMsg; aSignature->Display(Err);  Err << (char) 0;         
$	   Engine::Return(GetSString(Err),-1);                            
$          Eng_Status = Engine_Error;                                        
$      }                                                                     
$                                                                            
$    } 
$    catch(Standard_Failure) {                                             
$#ifdef OBJS                                            
$      os_transaction* curTrans = os_transaction::get_current();
$      if (curTrans) os_transaction::abort_top_level ();
$#endif
$      Err << "Exception: ";                                               
$      aSignature->Display(Err);                                              
$      Err << ": raises the exception: "                                   
$          <<Standard_Failure::Caught();                                     
$      Err << (char) 0;                                                      
$      Engine::Return(GetSString(Err),-1);                                
$      Eng_Status = Engine_Exception;                                        
$    }                                                                       
$  }                                                                         
$                                                                            
$  switch(Eng_Status) {                                                      
$    case Engine_Exception:Engine_MethodException::Raise(GetSString(Err));
$    case Engine_Error    :Engine_ExecutionError::Raise(GetSString(Err)); 
$    default:
$      break;	
$  }                                                                         
$}                                                                           
@end;

@template InterfInitDefType(%CLName,%InhDeclar,%InhList,%NbInh) is
$
$Handle_Standard_Type&  %CLName_Type_(){
$
$static Handle_Standard_Type _aType;
$if (_aType.IsNull()) {
$   _aType = Engine_TypeTool::Find("%CLName");
$   if (_aType.IsNull()) {
$%InhDeclar 
$static Handle_Standard_Transient _Ancestors[]= {
$%InhList 
$NULL};
$
$_aType = 
$       new Standard_Type("%CLName",
$	                  0, // size is useless
$                         %NbInh,
$                         (Standard_Address)_Ancestors,
$                         (Standard_Address)NULL);
$   }
$ }
$return _aType;
$}
$
@end;

@template InterfInitDeclInhType(%InhName,%NumInh) is
$Handle_Standard_Type&  %InhName_Type_();
$static Handle_Standard_Type aType%NumInh = STANDARD_TYPE(%InhName);
@end;

@template InterfInitEnumType(%CLName) is
$
$Handle_Standard_Type&  %CLName_Type_(){
$
$static Handle_Standard_Transient _Ancestors[]= {
$NULL};
$
$static Handle_Standard_Type _aType = 
$       new Standard_Type("%CLName",
$	                  0, // size is useless
$                         0,
$                         0,
$                         (Standard_Address)_Ancestors,
$                         (Standard_Address)NULL);
$return _aType;
$}
$
@end;

@template InterfInitGlobType(%CLName) is
$Handle_Standard_Type& %CLName_Type_();
@end;

@template InterfInitTypeCall(%CLName) is
$   Engine_TypeTool::Register(%CLName_Type_());
@end;


