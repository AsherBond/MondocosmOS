-- File:	CPPJini_Template.edl
-- Author:	Kernel (CLE)
-- History:	Tue Dec 19 08:22:43 1995	Kernel	Creation
-- Copyright:	 Matra Datavision 1995


@template TransientRootClientJAVA(%Interface,%LibName) is
$// This file is generated by WOK (CPPJini).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$
$
$
$package %Interface;
$
$import jcas.Transient;
$
$public class Standard_Transient extends jcas.Transient {
$
$ static {
$    System.loadLibrary("%LibName");
$ }
$            
$
$}
@end;

@template StorableRootClientJAVA(%Interface,%LibName) is
$// This file is generated by WOK (CPPJini).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$
$
$package %Interface;
$
$import jcas.Object;
$
$public class Standard_Storable extends jcas.Object {
$
$ static {
$    System.loadLibrary("%LibName");
$ }
$            
$}
@end;

@template MemoryRootClientJAVA(%Interface,%LibName) is
$// This file is generated by WOK (CPPJini).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$
$
$package %Interface;
$
$import jcas.Object;
$import %Interface.Standard_Transient;
$
$public class MMgt_TShared extends %Interface.Standard_Transient {
$
$ static {
$    System.loadLibrary("%LibName");
$ }
$            
$}
@end;

@template TransientClassClientJAVA(%Interface,%Class,%Inherits,%Includes,%Methods,%LibName) is
$
$
$package %Interface;
$
$import jcas.Object;
$%Includes
$
$public class %Class extends %Inherits {
$
$ static {
$    System.loadLibrary("%LibName");
$ }
$            
$%Methods
$
$
$}
@end;

@template TransientClassClientCXX(%Interface,%Class,%Methods,%Includes,%IncludeInterface) is
$
$#include <%IncludeInterface_%Class.h>
$#include <%Class.hxx>
$#include <jcas.hxx>
$#include <stdlib.h>
$#include <Standard_ErrorHandler.hxx>
$#include <Standard_Failure.hxx>
$#include <Standard_SStream.hxx>
$
$%Includes
$
$extern "C" {
$%Methods
$}
@end;

@template ValueClassClientJAVA(%Interface,%Class,%Inherits,%Includes,%Methods,%LibName) is
$// This file is generated by WOK (CPPJini).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$
$
$package %Interface;
$
$%Includes
$
$public class %Class extends %Inherits {
$
$ static {
$    System.loadLibrary("%LibName");
$ }
$            
$%Methods
$
$public native static void FinalizeValue(long anHID);
$
$public void finalize() {
$   synchronized(myCasLock) {
$     if ( aVirer != 0 ) FinalizeValue(HID);
$     HID = 0;
$   }
$}
$
$}
@end;

@template ValueClassClientCXX(%Interface,%Class,%Methods,%Includes,%IncludeInterface) is
$// This file is generated by WOK (CPPJini).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$
$#include <%IncludeInterface_%Class.h>
$#include <%Class.hxx>
$#include <jcas.hxx>
$#include <stdlib.h>
$#include <Standard_ErrorHandler.hxx>
$#include <Standard_Failure.hxx>
$#include <Standard_SStream.hxx>
$
$%Includes
$
$extern "C" {
$%Methods
$}
@end;

@template PackageClientJAVA(%Interface,%Class,%Includes,%Methods,%LibName) is
$// This file is generated by WOK (CPPJini).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$
$
$package %Interface;
$
$%Includes
$
$public class %Class {
$
$ static {
$    System.loadLibrary("%LibName");
$ }
$            
$%Methods
$
$
$}
@end;

@template PackageClientCXX(%Interface,%Class,%Methods,%Includes,%IncludeInterface) is
$// This file is generated by WOK (CPPJini).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$
$
$#include <%IncludeInterface_%Class.h>
$#include <%Class.hxx>
$#include <jcas.hxx>
$#include <stdlib.h>
$#include <Standard_ErrorHandler.hxx>
$#include <Standard_Failure.hxx>
$#include <Standard_SStream.hxx>
$
$%Includes
$
$extern "C" {
$%Methods
$}
@end;

@template EnumJAVA(%Interface,%Class,%Values) is
$// This file is generated by WOK (CPPJini).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$
$
$package %Interface;
$
$
$public class %Class extends jcas.Standard_Enumeration  {
$
$%Values
$
$  
$}
@end;

-- method header

@template CreateMethodDec(%MethodName) is
$
$
$JNIEXPORT void JNICALL %MethodName (JNIEnv *env, jobject theobj\^
@end;

@template InstMethodDec(%MethodName,%Return) is
$
$
$JNIEXPORT %Return JNICALL %MethodName (JNIEnv *env, jobject theobj\^
@end;

@template ClassMethodDec(%MethodName,%ClassName,%Return) is
$
$
$JNIEXPORT %Return JNICALL %MethodName (JNIEnv *env, jclass\^
@end;

@template PackMethodDec(%MethodName,%ClassName,%Return) is
$
$
$JNIEXPORT %Return JNICALL %MethodName (JNIEnv *env, jclass\^
@end;


@template MethodArg(%TypeName,%ArgName) is
$, %TypeName %ArgName\^
@end;


-- argument transfert

@template TransientGetValue(%ClassName,%ArgName) is
$ Handle( %ClassName ) the_%ArgName;
$ void*                ptr_%ArgName = jcas_GetHandle(env,%ArgName);
$ 
$ if ( ptr_%ArgName != NULL ) the_%ArgName = *(   (  Handle( %ClassName )*  )ptr_%ArgName   );
$
@end;

@template ValueGetValue(%ClassName,%ArgName) is
$%ClassName* the_%ArgName = (%ClassName*) jcas_GetHandle(env,%ArgName);
$if ( the_%ArgName == NULL ) {
$
$ // The following assumes availability of the default constructor (what may not
$ // always be the case). Therefore explicit exception is thrown if the null
$ // object has been passed.
$ // the_%ArgName = new %ClassName ();
$ // jcas_SetHandle ( env, %ArgName, the_%ArgName );
$ jcas_ThrowException (env, "NULL object has been passed while expecting an object manipulated by value");
$
$}  // end if
@end;

@template CStringGetValue(%ArgName) is
$Standard_CString the_%ArgName = jcas_ConvertToCString(env,%ArgName);
@end;

@template StringGetValue(%ArgName) is
$Standard_ExtString the_%ArgName = jcas_ConvertToExtString(env,%ArgName);
@end;

@template BooleanGetValue(%ArgName) is
$Standard_Boolean the_%ArgName = jcas_GetBoolean(env,%ArgName);
@end;

@template RealGetValue(%ArgName) is
$Standard_Real the_%ArgName = jcas_GetReal(env,%ArgName);
@end;

@template CharacterGetValue(%ArgName) is
$Standard_Character the_%ArgName = jcas_GetCharacter(env,%ArgName);
@end;

@template IntegerGetValue(%ArgName) is
$Standard_Integer the_%ArgName = jcas_GetInteger(env,%ArgName);
@end;

@template ShortGetEnumValue(%ArgName,%EnumName) is
$%EnumName the_%ArgName = ( %EnumName )jcas_GetShort ( env, %ArgName );
@end;

@template ExtCharacterGetValue(%ArgName) is
$Standard_ExtCharacter the_%ArgName = jcas_GetExtCharacter(env,%ArgName);
@end;

@template ByteGetValue(%ArgName) is
$Standard_Byte the_%ArgName = jcas_GetByte(env,%ArgName);
@end;

@template ShortRealGetValue(%ArgName) is
$Standard_ShortReal the_%ArgName = jcas_GetShortReal(env,%ArgName);
@end;

@template StringBufferGetValue(%ArgName) is
$Standard_ExtString the_%ArgName = jcas_ConvertSBToExtString(env,%ArgName);
@end;

@template ThisTransientGetValue(%ClassName) is
$Handle(%ClassName) the_this = *((Handle(%ClassName)*) jcas_GetHandle(env,theobj));
@end;

@template ThisValueGetValue(%ClassName) is
$%ClassName* the_this = (%ClassName*) jcas_GetHandle(env,theobj);
@end;


-- out argument

@template TransientSetValue(%ClassName,%ArgName,%FromInterface) is
$
$ Handle( %ClassName )* theprevious_%ArgName =
$  (  Handle( %ClassName )*  )jcas_GetHandle ( env, %ArgName );
$
$ if ( theprevious_%ArgName ) delete theprevious_%ArgName;
$
$ Handle( %ClassName )* thenew_%ArgName = new Handle( %ClassName );
$
$ ( *thenew_%ArgName ) = the_%ArgName;
$
$ jcas_SetHandle (env, %ArgName, thenew_%ArgName );
$
@end;

@template CStringSetValue(%ArgName) is
$jcas_SetCStringValue(env,%ArgName,the_%ArgName);
@end;

@template BooleanSetValue(%ArgName) is
$jcas_SetBoolean(env,%ArgName,the_%ArgName);
@end;

@template RealSetValue(%ArgName) is
$jcas_SetReal(env,%ArgName,the_%ArgName);
@end;

@template CharacterSetValue(%ArgName) is
$jcas_SetCharacter(env,%ArgName,the_%ArgName);
@end;

@template ShortSetValue(%ArgName) is
$jcas_SetShort(env,%ArgName,the_%ArgName);
@end;

@template IntegerSetValue(%ArgName) is
$jcas_SetInteger(env,%ArgName,the_%ArgName);
@end;

@template ExtCharacterSetValue(%ArgName) is
$jcas_SetExtCharacter(env,%ArgName,the_%ArgName);
@end;

@template ByteSetValue(%ArgName) is
$jcas_SetByte(env,%ArgName,the_%ArgName);
@end;

@template ShortRealSetValue(%ArgName) is
$jcas_SetShortReal(env,%ArgName,the_%ArgName);
@end;

@template StringBufferSetValue(%ArgName) is
$jcas_SetExtStringToStringBuffer(env,%ArgName,the_%ArgName);
@end;

-- templates for call


@template ClassMethodCall(%MethodName,%ClassName,%ArgsInCall) is
$%ClassName::%MethodName(%ArgsInCall)\^
@end;

@template PackMethodCall(%MethodName,%ClassName,%ArgsInCall) is
$%ClassName::%MethodName(%ArgsInCall)\^
@end;

@template InstMethodCall(%MethodName,%ClassName,%ArgsInCall) is
$the_this->%MethodName(%ArgsInCall)\^
@end;

-- constructors

@template ValueCreateMethodCall(%ClassName,%ArgsInCall) is
$%ClassName* theret = new %ClassName(%ArgsInCall);
$jcas_SetHandle(env,theobj,theret);
@end;

@template TransientCreateMethodCall(%ClassName,%ArgsInCall) is
$Handle(%ClassName)* theret = new Handle(%ClassName);
$*theret = new %ClassName(%ArgsInCall);
$jcas_SetHandle(env,theobj,theret);
@end;

-- return type

@template ReturnHandle(%ClassName,%MethodCall,%FromInterface) is
$Handle(%ClassName)* theret = new Handle(%ClassName);
$*theret = %MethodCall;
$thejret = jcas_CreateObject(env,"%FromInterface/%ClassName",theret);
@end;

@template ReturnValueMagic(%ClassName,%MethodCall,%FromInterface) is
$%ClassName* theret = new %ClassName(%MethodCall);
$thejret = jcas_CreateObject(env,"%FromInterface/%ClassName",theret);
@end;

@template ReturnValueRef(%ClassName,%MethodCall,%FromInterface) is
$const %ClassName& theret = %MethodCall;
$thejret = jcas_CreateObject(env,"%FromInterface/%ClassName",&theret,0);
@end;

@template ReturnValueEmpty(%ClassName,%MethodCall,%FromInterface) is
$%ClassName* theret = new %ClassName();
$*theret = %MethodCall;
$thejret = jcas_CreateObject(env,"%FromInterface/%ClassName",theret);
@end;

@template ReturnValueMalloc(%ClassName,%MethodCall,%FromInterface) is
$%ClassName *theret = ((%ClassName *) malloc(sizeof(%ClassName)));
$*theret = %MethodCall;
$thejret = jcas_CreateObject(env,"%FromInterface/%ClassName",theret);
@end;

@template ReturnCString(%MethodCall) is
$Standard_CString sret = %MethodCall;
$jclass CLSret  = env->FindClass("jcas/Standard_CString");
$thejret = env->AllocObject(CLSret);
$jcas_SetCStringValue(env,thejret,sret);
@end;

@template ReturnString(%MethodCall) is
$Standard_ExtString sret = %MethodCall;
$thejret = jcas_ConvertTojstring(env,sret);
@end;

@template ReturnVar (%ObjType) is
$%ObjType thejret;
@end;

-- finalize for MPV types

@template FinalizeForValue(%Class,%MethodName) is
$
$
$JNIEXPORT void JNICALL %MethodName(JNIEnv *, jclass, jlong theid)
${
$if (theid) {
$  %Class* theobj = (%Class*) theid;
$  delete theobj;
$}
$}
$
@end;

