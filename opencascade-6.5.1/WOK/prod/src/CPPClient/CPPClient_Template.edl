-- File:	CPPClient_Template.edl
-- Author:	Kernel (CLE)
-- History:	Tue Dec 19 08:22:43 1995	Kernel	Creation
-- Copyright:	 Matra Datavision 1995

@template HandleClient(%Interface,%Class,%Inherits) is
$// This file is generated by WOK (CPPClient).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$
$#ifndef _Handle_%Class_HeaderFile
$#define _Handle_%Class_HeaderFile
$
$#ifndef _Standard_DefineHandle_HeaderFile
$#include <Standard_DefineHandle.hxx>
$#endif
$#ifndef _Handle_%Inherits_HeaderFile
$#include <Handle_%Inherits.hxx>
$#endif
$
$class Standard_Transient;
$class Handle(Standard_Type);
$class %Class; 
$
$DEFINE_STANDARD_HANDLE(%Class,%Inherits)
$
$#endif
@end;

@template BuildTypeName(%Interface,%Class) is
$%Interface_%Class\^
@end;

@template TransientRootClientHXX(%Interface) is
$// This file is generated by WOK (CPPClient).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$
$#ifndef _%Interface_Standard_Transient_HeaderFile
$#define _%Interface_Standard_Transient_HeaderFile
$
$#include <Handle_%Interface_Standard_Transient.hxx>
$
$#ifndef _FrontEnd_EngineAdaptor_HeaderFile
$#include <FrontEnd_EngineAdaptor.hxx>
$#endif
$#ifndef _FrontEnd_HExternRef_HeaderFile
$#include <FrontEnd_HExternRef.hxx>
$#endif
$extern Handle(FrontEnd_EngineAdaptor) __NullEngineAdaptor;
$extern FrontEnd_FHandle __NullFHandle;
$Standard_EXPORT Handle_Standard_Type& %Interface_Standard_Transient_Type_();
$
$class %Interface_Standard_Transient: public FrontEnd_HExternRef {
$
$public:
$
$ %Interface_Standard_Transient(const FrontEnd_FHandle& _aRef, const Handle(FrontEnd_EngineAdaptor)& _anEng) : FrontEnd_HExternRef(_aRef,_anEng) 
$ {
$ }
$  
$ const Handle(Standard_Type)& DynamicType() const
$ { 
$  return STANDARD_TYPE(%Interface_Standard_Transient) ; 
$ }
$
$ Standard_Boolean IsKind(const Handle(Standard_Type)& AType) const 
$ { 
$   return (STANDARD_TYPE(%Interface_Standard_Transient) == AType || FrontEnd_HExternRef::IsKind(AType));
$ }
$};
$
$#endif
@end;

@template TransientRootClientCXX(%Interface) is
$// This file is generated by WOK (CPPClient).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$//
$#ifndef _%Interface_Standard_Transient_HeaderFile
$#include <%Interface_Standard_Transient.hxx>
$#endif
$
$#ifndef _FrontEnd_EngineAdaptor_HeaderFile
$#include <FrontEnd_EngineAdaptor.hxx>
$#endif
$#ifndef _FrontEnd_ExternRef_HeaderFile
$#include <FrontEnd_ExternRef.hxx>
$#endif
$#ifndef _FrontEnd_HExternRef_HeaderFile
$#include <FrontEnd_HExternRef.hxx>
$#endif
$#ifndef _FrontEnd_FHandle_HeaderFile
$#include <FrontEnd_FHandle.hxx>
$#endif
$#ifndef _FrontEnd_Method_HeaderFile
$#include <FrontEnd_Method.hxx>
$#endif
$#ifndef _FrontEnd_InstanceMet_HeaderFile
$#include <FrontEnd_InstanceMet.hxx>
$#endif
$#ifndef _FrontEnd_ClassMet_HeaderFile
$#include <FrontEnd_ClassMet.hxx>
$#endif
$#ifndef _FrontEnd_CreateMet_HeaderFile
$#include <FrontEnd_CreateMet.hxx>
$#endif
$
$Handle_Standard_Type& %Interface_Standard_Transient_Type_()
${
$  static Handle_Standard_Type aTypeT = STANDARD_TYPE(Standard_Transient);
$  static Handle_Standard_Type aTypeTs = STANDARD_TYPE(MMgt_TShared);
$  static Handle_Standard_Type aType1 = STANDARD_TYPE(FrontEnd_HExternRef);
$  static Handle_Standard_Transient _Ancestors[]= {aType1,aTypeTs,aTypeT,NULL};
$  static Handle_Standard_Type _aType = new Standard_Type("%Interface_Standard_Transient",
$			                                 sizeof(%Interface_Standard_Transient),
$			                                 1,
$			                                 (Standard_Address)_Ancestors,
$			                                 (Standard_Address)NULL);
$  return _aType;
$}
$ 
$const Handle(%Interface_Standard_Transient) Handle(%Interface_Standard_Transient)::DownCast(const Handle(Standard_Transient)& AnObject) 
${
$  Handle(%Interface_Standard_Transient) _anOtherObject;
$
$  if (!AnObject.IsNull()) 
$        if (AnObject->IsKind(STANDARD_TYPE(%Interface_Standard_Transient))) {
$           _anOtherObject = Handle(%Interface_Standard_Transient)((Handle(%Interface_Standard_Transient)&)AnObject);
$        }
$      
$  return _anOtherObject ;
$}
$
@end;

@template PersistentRootClientHXX(%Interface) is
$// This file is generated by WOK (CPPClient).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$//
$#ifndef _%Interface_Standard_Persistent_HeaderFile
$#define _%Interface_Standard_Persistent_HeaderFile
$#include <Handle_%Interface_Standard_Persistent.hxx>
$
$#ifndef _FrontEnd_EngineAdaptor_HeaderFile
$#include <FrontEnd_EngineAdaptor.hxx>
$#endif
$#ifndef _FrontEnd_HExternRef_HeaderFile
$#include <FrontEnd_HExternRef.hxx>
$#endif
$#ifndef _%Interface_Standard_Storable_HeaderFile
$#include <%Interface_Standard_Storable.hxx>
$#endif
$
$extern Handle(FrontEnd_EngineAdaptor) __NullEngineAdaptor;
$extern FrontEnd_FHandle __NullFHandle;
$Standard_EXPORT Handle_Standard_Type& %Interface_Standard_Persistent_Type_();
$
$class %Interface_Standard_Persistent: public FrontEnd_HExternRef{
$
$public:
$
$  %Interface_Standard_Persistent(const FrontEnd_FHandle& _aRef, const Handle(FrontEnd_EngineAdaptor)& _anEng) 
$                                     : FrontEnd_HExternRef(_aRef,_anEng) 
$  {
$  }
$
$  const Handle(Standard_Type)& DynamicType() const 
$  { 
$   return STANDARD_TYPE(%Interface_Standard_Persistent) ; 
$  }
$
$  Standard_Boolean IsKind(const Handle(Standard_Type)& AType) const 
$  { 
$   return (STANDARD_TYPE(%Interface_Standard_Persistent) == AType  || FrontEnd_HExternRef::IsKind(AType)); 
$  }
$};
$
$#endif
@end;


@template PersistentRootClientCXX(%Interface) is
$// This file is generated by WOK (CPPClient).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$//
$#ifndef _%Interface_Standard_Persistent_HeaderFile
$#include <%Interface_Standard_Persistent.hxx>
$#endif
$#ifndef _FrontEnd_EngineAdaptor_HeaderFile
$#include <FrontEnd_EngineAdaptor.hxx>
$#endif
$#ifndef _FrontEnd_ExternRef_HeaderFile
$#include <FrontEnd_ExternRef.hxx>
$#endif
$#ifndef _FrontEnd_HExternRef_HeaderFile
$#include <FrontEnd_HExternRef.hxx>
$#endif
$#ifndef _FrontEnd_FHandle_HeaderFile
$#include <FrontEnd_FHandle.hxx>
$#endif
$#ifndef _FrontEnd_Method_HeaderFile
$#include <FrontEnd_Method.hxx>
$#endif
$#ifndef _FrontEnd_InstanceMet_HeaderFile
$#include <FrontEnd_InstanceMet.hxx>
$#endif
$#ifndef _FrontEnd_ClassMet_HeaderFile
$#include <FrontEnd_ClassMet.hxx>
$#endif
$#ifndef _FrontEnd_CreateMet_HeaderFile
$#include <FrontEnd_CreateMet.hxx>
$#endif
$
$Handle_Standard_Type& %Interface_Standard_Persistent_Type_()
${
$  static Handle_Standard_Type aType1 = STANDARD_TYPE(%Interface_Standard_Storable);
$  static Handle_Standard_Type aType2 = STANDARD_TYPE(FrontEnd_HExternRef);
$  static Handle_Standard_Type aTypeT = STANDARD_TYPE(Standard_Transient);
$  static Handle_Standard_Type aTypeTs = STANDARD_TYPE(MMgt_TShared);
$  static Handle_Standard_Transient _Ancestors[]= {aType1,aType2,aTypeTs,aTypeT,NULL};
$  static Handle_Standard_Type _aType = new Standard_Type("%Interface_Standard_Persistent",
$			sizeof(%Interface_Standard_Persistent),
$			1,
$			(Standard_Address)_Ancestors,
$			(Standard_Address)NULL);
$
$  return _aType;
$}
$ 
$const Handle(%Interface_Standard_Persistent) Handle(%Interface_Standard_Persistent)::DownCast(const Handle(Standard_Transient)& AnObject) 
${
$ Handle(%Interface_Standard_Persistent) _anOtherObject;
$
$ if (!AnObject.IsNull()) 
$   if (AnObject->IsKind(STANDARD_TYPE(%Interface_Standard_Persistent))) {
$      _anOtherObject = Handle(%Interface_Standard_Persistent)((Handle(%Interface_Standard_Persistent)&)AnObject);
$   }
$
$ return _anOtherObject ;
$}
$
$Handle(%Interface_Standard_Persistent)::~Handle(%Interface_Standard_Persistent)()
${
$}
$
@end;

@template StorableRootClientHXX(%Interface) is
$// This file is generated by WOK (CPPClient).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$//
$#ifndef _FrontEnd_EngineAdaptor_HeaderFile
$#include <FrontEnd_EngineAdaptor.hxx>
$#endif
$#ifndef _FrontEnd_ExternRef_HeaderFile
$#include <FrontEnd_ExternRef.hxx>
$#endif
$#ifndef _Standard_Integer_HeaderFile
$#include <Standard_Integer.hxx>
$#endif
$#ifndef _FrontEnd_FHandle_HeaderFile
$#include <FrontEnd_FHandle.hxx>
$#endif
$#ifndef _%Interface_Standard_Storable_HeaderFile
$#define _%Interface_Standard_Storable_HeaderFile
$Standard_EXPORT Handle_Standard_Type& %Interface_Standard_Storable_Type_();
$extern Handle(FrontEnd_EngineAdaptor) __NullEngineAdaptor;
$extern FrontEnd_FHandle __NullFHandle;
$
$class %Interface_Standard_Storable: public FrontEnd_ExternRef 
${
$
$ public:
$  Standard_EXPORT virtual Standard_Integer HashCode(const Standard_Integer Upper) const ;
$  Standard_EXPORT Standard_Boolean IsEqual(const %Interface_Standard_Storable& Other) const ;
$  Standard_EXPORT Standard_Boolean IsSimilar(const %Interface_Standard_Storable& Other) const ;
$  %Interface_Standard_Storable(const FrontEnd_FHandle& ) {}
$   %Interface_Standard_Storable(const FrontEnd_FHandle& _aRef, const Handle(FrontEnd_EngineAdaptor)& _anEng) 
$                             : FrontEnd_ExternRef(_aRef,_anEng) 
$   {
$   }
$};
$
$#endif
@end;

@template StorableRootClientCXX(%Interface) is
$// This file is generated by WOK (CPPClient).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$//
$#ifndef _%Interface_Standard_Storable_HeaderFile
$#include <%Interface_Standard_Storable.hxx>
$#endif
$#ifndef _FrontEnd_EngineAdaptor_HeaderFile
$#include <FrontEnd_EngineAdaptor.hxx>
$#endif
$#ifndef _FrontEnd_ExternRef_HeaderFile
$#include <FrontEnd_ExternRef.hxx>
$#endif
$#ifndef _FrontEnd_HExternRef_HeaderFile
$#include <FrontEnd_HExternRef.hxx>
$#endif
$#ifndef _FrontEnd_FHandle_HeaderFile
$#include <FrontEnd_FHandle.hxx>
$#endif
$#ifndef _FrontEnd_Method_HeaderFile
$#include <FrontEnd_Method.hxx>
$#endif
$#ifndef _FrontEnd_InstanceMet_HeaderFile
$#include <FrontEnd_InstanceMet.hxx>
$#endif
$#ifndef _FrontEnd_ClassMet_HeaderFile
$#include <FrontEnd_ClassMet.hxx>
$#endif
$#ifndef _FrontEnd_CreateMet_HeaderFile
$#include <FrontEnd_CreateMet.hxx>
$#endif
$
$Handle_Standard_Type& %Interface_Standard_Storable_Type_()
${
$  static Handle_Standard_Type aType2 = STANDARD_TYPE(FrontEnd_HExternRef);
$  static Handle_Standard_Type aTypeT = STANDARD_TYPE(Standard_Transient);
$  static Handle_Standard_Type aTypeTs = STANDARD_TYPE(MMgt_TShared);
$  static Handle_Standard_Transient _Ancestors[]= {aType2,aTypeTs,aTypeT,NULL};
$  static Handle_Standard_Type _aType = new Standard_Type("%Interface_Standard_Storable",
$			                                 sizeof(%Interface_Standard_Storable),
$			                                 1,
$			                                 (Standard_Address)_Ancestors,
$			                                 (Standard_Address)NULL);
$
$  return _aType;
$}
$
$Standard_Integer %Interface_Standard_Storable::HashCode(const Standard_Integer Upper) const 
${
$ FrontEnd_InstanceMet _aMethod ("HashCode",Reference(),Engine());
$ _aMethod.Arg(Upper);
$ _aMethod.Execute();
$ return (_aMethod.ReturnInteger());
$}
$
$
$Standard_Boolean %Interface_Standard_Storable::IsEqual(const %Interface_Standard_Storable& Other) const 
${
$ FrontEnd_InstanceMet _aMethod ("IsEqual",Reference(),Engine());
$ _aMethod.Arg(Other);
$ _aMethod.Execute();
$ return (_aMethod.ReturnBoolean());
$}
$
$Standard_Boolean %Interface_Standard_Storable::IsSimilar(const %Interface_Standard_Storable& Other) const 
${
$ FrontEnd_InstanceMet _aMethod ("IsSimilar",Reference(),Engine());
$ _aMethod.Arg(Other);
$ _aMethod.Execute();
$ return (_aMethod.ReturnBoolean());
$}
@end;

@template MemoryRootClientHXX(%Interface) is
$// This file is generated by WOK (CPPClient).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$//
$#ifndef _%Interface_MMgt_TShared_HeaderFile
$#define _%Interface_MMgt_TShared_HeaderFile
$#include <Handle_%Interface_MMgt_TShared.hxx>
$
$#ifndef _FrontEnd_EngineAdaptor_HeaderFile
$#include <FrontEnd_EngineAdaptor.hxx>
$#endif
$
$#ifndef _%Interface_Standard_Transient_HeaderFile
$#include <%Interface_Standard_Transient.hxx>
$#endif
$
$extern Handle(FrontEnd_EngineAdaptor) __NullEngineAdaptor;
$extern FrontEnd_FHandle __NullFHandle;
$class Handle_Standard_Type;
$Standard_EXPORT Handle_Standard_Type& %Interface_MMgt_TShared_Type_();
$
$#ifndef _%Interface_Standard_Transient_HeaderFile
$#include <%Interface_Standard_Transient.hxx>
$#endif
$#ifndef _Standard_Address_HeaderFile
$#include <Standard_Address.hxx>
$#endif
$#ifndef _Standard_Integer_HeaderFile
$#include <Standard_Integer.hxx>
$#endif
$
$Standard_EXPORT Handle_Standard_Type& %Interface_MMgt_TShared_Type_();
$
$class %Interface_MMgt_TShared: public %Interface_Standard_Transient {
$
$public:
$ %Interface_MMgt_TShared(const FrontEnd_FHandle& _aRef, const Handle(FrontEnd_EngineAdaptor)& _anEng) 
$                                   : %Interface_Standard_Transient(_aRef,_anEng) 
$        {
$        }
$
$  const Handle(Standard_Type)& DynamicType() const 
$  { 
$   return STANDARD_TYPE(%Interface_MMgt_TShared) ; 
$  }
$
$  Standard_Boolean IsKind(const Handle(Standard_Type)& AType) const 
$  { 
$   return (STANDARD_TYPE(%Interface_MMgt_TShared) == AType  || %Interface_Standard_Transient::IsKind(AType)); 
$  }
$};
$
$#endif
@end;

@template MemoryRootClientCXX(%Interface) is
$
$#ifndef _%Interface_MMgt_TShared_HeaderFile
$#include <%Interface_MMgt_TShared.hxx>
$#endif
$#ifndef _FrontEnd_EngineAdaptor_HeaderFile
$#include <FrontEnd_EngineAdaptor.hxx>
$#endif
$#ifndef _FrontEnd_ExternRef_HeaderFile
$#include <FrontEnd_ExternRef.hxx>
$#endif
$#ifndef _FrontEnd_HExternRef_HeaderFile
$#include <FrontEnd_HExternRef.hxx>
$#endif
$#ifndef _FrontEnd_FHandle_HeaderFile
$#include <FrontEnd_FHandle.hxx>
$#endif
$#ifndef _FrontEnd_Method_HeaderFile
$#include <FrontEnd_Method.hxx>
$#endif
$#ifndef _FrontEnd_InstanceMet_HeaderFile
$#include <FrontEnd_InstanceMet.hxx>
$#endif
$#ifndef _FrontEnd_ClassMet_HeaderFile
$#include <FrontEnd_ClassMet.hxx>
$#endif
$#ifndef _FrontEnd_CreateMet_HeaderFile
$#include <FrontEnd_CreateMet.hxx>
$#endif
$
$
$
$Handle_Standard_Type& %Interface_MMgt_TShared_Type_()
${
$    static Handle_Standard_Type aType1 = STANDARD_TYPE(%Interface_Standard_Transient);
$  static Handle_Standard_Type aType2 = STANDARD_TYPE(FrontEnd_HExternRef);
$  if ( aType1.IsNull()) aType1 = STANDARD_TYPE(%Interface_Standard_Transient);
$ 
$
$  static Handle_Standard_Transient _Ancestors[]= {aType1,aType2,NULL};
$  static Handle_Standard_Type _aType = new Standard_Type("%Interface_MMgt_TShared",
$			                                 sizeof(%Interface_MMgt_TShared),
$			                                 1,
$			                                 (Standard_Address)_Ancestors,
$			                                 (Standard_Address)NULL);
$
$  return _aType;
$}
$
$
$const Handle(%Interface_MMgt_TShared) Handle(%Interface_MMgt_TShared)::DownCast(const Handle(Standard_Transient)& AnObject) 
${
$  Handle(%Interface_MMgt_TShared) _anOtherObject;
$
$  if (!AnObject.IsNull()) 
$    if (AnObject->IsKind(STANDARD_TYPE(%Interface_MMgt_TShared))) {
$      _anOtherObject = Handle(%Interface_MMgt_TShared)((Handle(%Interface_MMgt_TShared)&)AnObject);
$    }
$
$  return _anOtherObject;
$}
$
$Handle(%Interface_MMgt_TShared)::~Handle(%Interface_MMgt_TShared)(){}
@end;

@template RefClassClientHXX(%Class,%Inherits,%Includes,%Methods) is
$// This file is generated by WOK (CPPClient).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$//
$#ifndef _%Class_HeaderFile
$#define _%Class_HeaderFile
$#include <Handle_%Class.hxx>
$
$#ifndef _FrontEnd_EngineAdaptor_HeaderFile
$#include <FrontEnd_EngineAdaptor.hxx>
$#endif
$#ifndef _FrontEnd_MID_HeaderFile
$#include <FrontEnd_MID.hxx>
$#endif
$#ifndef _%Inherits_HeaderFile
$#include <%Inherits.hxx>
$#endif
$
$class Handle_Standard_Type;
$Standard_EXPORT Handle_Standard_Type& %Class_Type_();
$extern Handle(FrontEnd_EngineAdaptor) __NullEngineAdaptor;
$extern FrontEnd_FHandle __NullFHandle;
$
$%Includes
$
$class %Class: public %Inherits {
$
$public:
$ %Methods
$
$ %Class(const FrontEnd_FHandle& _aRef, const Handle(FrontEnd_EngineAdaptor)& _anEng) 
$                                   : %Inherits(_aRef,_anEng) 
$        {
$        }
$
$ const Handle(Standard_Type)& DynamicType() const 
$ { 
$   return STANDARD_TYPE(%Class); 
$ }
$
$ Standard_Boolean IsKind(const Handle(Standard_Type)& AType) const 
$ {  
$  return (STANDARD_TYPE(%Class) == AType || %Inherits::IsKind(AType)); 
$ }
$};
$
$#endif
@end;

@template RefClassClientCXX(%Class,%Inherits,%Methods,%Includes,%TypeMgt) is
$// This file is generated by WOK (CPPClient).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$
$#ifndef _%Class_HeaderFile
$#include <%Class.hxx>
$#endif
$#ifndef _FrontEnd_EngineAdaptor_HeaderFile
$#include <FrontEnd_EngineAdaptor.hxx>
$#endif
$#ifndef _FrontEnd_ExternRef_HeaderFile
$#include <FrontEnd_ExternRef.hxx>
$#endif
$#ifndef _FrontEnd_HExternRef_HeaderFile
$#include <FrontEnd_HExternRef.hxx>
$#endif
$#ifndef _FrontEnd_FHandle_HeaderFile
$#include <FrontEnd_FHandle.hxx>
$#endif
$#ifndef _FrontEnd_Method_HeaderFile
$#include <FrontEnd_Method.hxx>
$#endif
$#ifndef _FrontEnd_InstanceMet_HeaderFile
$#include <FrontEnd_InstanceMet.hxx>
$#endif
$#ifndef _FrontEnd_ClassMet_HeaderFile
$#include <FrontEnd_ClassMet.hxx>
$#endif
$#ifndef _FrontEnd_CreateMet_HeaderFile
$#include <FrontEnd_CreateMet.hxx>
$#endif
$
$%Includes
$
$%TypeMgt
$
$const Handle(%Class) Handle(%Class)::DownCast(const Handle(Standard_Transient)& AnObject) 
${
$  Handle(%Class) _anOtherObject;
$
$  if (!AnObject.IsNull()) 
$    if (AnObject->IsKind(STANDARD_TYPE(%Class))) {
$      _anOtherObject = Handle(%Class)((Handle(%Class)&)AnObject);
$    }
$
$  return _anOtherObject;
$}
$
$Handle(%Class)::~Handle(%Class)(){}
$
$%Methods
@end;

@template ValueClassClientHXX(%InheritsTrick,%Class,%Inherits,%Includes,%Methods) is
$// This file is generated by WOK (CPPClient).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$
$//
$#ifndef _%Class_HeaderFile
$#define _%Class_HeaderFile
$#ifndef _FrontEnd_EngineAdaptor_HeaderFile
$#include <FrontEnd_EngineAdaptor.hxx>
$#endif
$#ifndef _%Inherits_HeaderFile
$#include <%Inherits.hxx>
$#endif
$#ifndef _FrontEnd_MID_HeaderFile
$#include <FrontEnd_MID.hxx>
$#endif
$extern Handle(FrontEnd_EngineAdaptor) __NullEngineAdaptor;
$extern FrontEnd_FHandle __NullFHandle;
$%Includes
$
$class %Class: public %Inherits {
$
$public:
$ %Methods
$
$ %Class(const FrontEnd_FHandle&) %InheritsTrick {}
$ %Class(const FrontEnd_FHandle& _aRef, const Handle(FrontEnd_EngineAdaptor)& _anEng) 
$                                   : %Inherits(_aRef,_anEng) 
$        {
$        }
$};
$
$#endif
@end;

@template ValueClassClientCXX(%Class,%Methods,%Includes) is
$// This file is generated by WOK (CPPClient).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$
$#ifndef _%Class_HeaderFile
$#include <%Class.hxx>
$#endif
$#ifndef _FrontEnd_EngineAdaptor_HeaderFile
$#include <FrontEnd_EngineAdaptor.hxx>
$#endif
$#ifndef _FrontEnd_ExternRef_HeaderFile
$#include <FrontEnd_ExternRef.hxx>
$#endif
$#ifndef _FrontEnd_HExternRef_HeaderFile
$#include <FrontEnd_HExternRef.hxx>
$#endif
$#ifndef _FrontEnd_FHandle_HeaderFile
$#include <FrontEnd_FHandle.hxx>
$#endif
$#ifndef _FrontEnd_Method_HeaderFile
$#include <FrontEnd_Method.hxx>
$#endif
$#ifndef _FrontEnd_InstanceMet_HeaderFile
$#include <FrontEnd_InstanceMet.hxx>
$#endif
$#ifndef _FrontEnd_ClassMet_HeaderFile
$#include <FrontEnd_ClassMet.hxx>
$#endif
$#ifndef _FrontEnd_CreateMet_HeaderFile
$#include <FrontEnd_CreateMet.hxx>
$#endif
$
$%Includes
$
$%Methods
@end;

@template PackageClientHXX(%Class,%Includes,%Methods) is
$// This file is generated by WOK (CPPClient).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$//
$#ifndef _%Class_HeaderFile
$#define _%Class_HeaderFile
$#ifndef _FrontEnd_EngineAdaptor_HeaderFile
$#include <FrontEnd_EngineAdaptor.hxx>
$#endif
$#ifndef _FrontEnd_MID_HeaderFile
$#include <FrontEnd_MID.hxx>
$#endif
$extern Handle(FrontEnd_EngineAdaptor) __NullEngineAdaptor;
$%Includes
$
$class %Class {
$
$public:
$ %Methods
$};
$
$#endif
@end;

@template PackageClientCXX(%Class,%Methods,%Includes) is
$// This file is generated by WOK (CPPClient).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$
$#ifndef _%Class_HeaderFile
$#include <%Class.hxx>
$#endif
$#ifndef _FrontEnd_EngineAdaptor_HeaderFile
$#include <FrontEnd_EngineAdaptor.hxx>
$#endif
$#ifndef _FrontEnd_ExternRef_HeaderFile
$#include <FrontEnd_ExternRef.hxx>
$#endif
$#ifndef _FrontEnd_HExternRef_HeaderFile
$#include <FrontEnd_HExternRef.hxx>
$#endif
$#ifndef _FrontEnd_FHandle_HeaderFile
$#include <FrontEnd_FHandle.hxx>
$#endif
$#ifndef _FrontEnd_Method_HeaderFile
$#include <FrontEnd_Method.hxx>
$#endif
$#ifndef _FrontEnd_PackageMet_HeaderFile
$#include <FrontEnd_PackageMet.hxx>
$#endif
$
$%Includes
$
$%Methods
@end;

@template EnumHXX(%Class,%Values) is
$// This file is generated by WOK (CPPClient).
$// Please do not edit this file; modify original file instead.
$// The copyright and license terms as defined for the original file apply to 
$// this header file considered to be the "object code" form of the original source.
$//
$#ifndef _%Class_HeaderFile
$#define _%Class_HeaderFile
$
$enum %Class { 
$ %Values
$};
$
$
$#ifndef _Standard_PrimitiveTypes_HeaderFile
$#include <Standard_PrimitiveTypes.hxx>
$#endif
$
$#endif
@end;

-- method header

@template ConstructorClientDec(%Arguments) is
$%Argumentsconst Handle(FrontEnd_EngineAdaptor)& _aCurrent = FrontEnd_EngineAdaptor_Current\^
@end;

@template ConstructorClientDef(%Arguments) is
$%Argumentsconst Handle(FrontEnd_EngineAdaptor)& _aCurrent\^
@end;

@template AsyncClientDec(%Arguments) is
$%ArgumentsFrontEnd_MID& uid,const Handle(FrontEnd_EngineAdaptor)& _aCurrent = FrontEnd_EngineAdaptor_Current\^
@end;

@template AsyncClientDef(%Arguments) is
$%ArgumentsFrontEnd_MID& uid,const Handle(FrontEnd_EngineAdaptor)& _aCurrent\^
@end;

@template CreateMethodDec(%MethodName) is
$ FrontEnd_CreateMet _aMethod ("%MethodName",_aCurrent);
@end;

@template InstMethodDec(%MethodName) is
$ FrontEnd_InstanceMet _aMethod ("%MethodName",Reference(),Engine());
@end;

@template ClassMethodDec(%MethodName,%ClassName) is
$ FrontEnd_ClassMet _aMethod ("%MethodName","%ClassName",_aCurrent);
@end;

@template PackMethodDec(%MethodName,%ClassName) is
$ FrontEnd_PackageMet _aMethod("%MethodName","%ClassName",_aCurrent);
@end;

@template AsyncInstMethodDec(%MethodName) is
$ FrontEnd_InstanceMet* _aMethod = new FrontEnd_InstanceMet("%MethodName",Reference(),Engine());
$ FrontEnd_MID ___uid(_aMethod);
$ uid.Assign(___uid);
@end;

@template AsyncClassMethodDec(%MethodName,%ClassName) is
$ FrontEnd_ClassMet* _aMethod = new FrontEnd_ClassMet("%MethodName","%ClassName",_aCurrent);
$ FrontEnd_MID ___uid(_aMethod);
$ uid.Assign(___uid);
@end;

@template AsyncPackMethodDec(%MethodName,%ClassName) is
$ FrontEnd_PackageMet* _aMethod = new FrontEnd_PackageMet("%MethodName","%ClassName",_aCurrent);
$ FrontEnd_MID ___uid(_aMethod);
$ uid.Assign(___uid);
@end;

@template AsyncMethodArg(%ArgName) is
$ _aMethod->Arg(%ArgName);
@end;

@template AsyncMethodArgOut(%ArgName) is
$ _aMethod->ArgOut(%ArgName);
@end;

@template MethodArg(%ArgName) is
$ _aMethod.Arg(%ArgName);
@end;

@template MethodArgOut(%ArgName) is
$ _aMethod.ArgOut(%ArgName);
@end;

-- return type

@template CreateMethodReturnHandle() is
$ FrontEnd_HExternRef::Associated(_aMethod.ReturnFHandle(),_aCurrent);
@end;

@template CreateMethodReturnValue() is
$ FrontEnd_ExternRef::Associated(_aMethod.ReturnFHandle(),_aCurrent);
@end;

@template MethodReturnPrim(%PrimName) is
$ return (_aMethod.Return%PrimName());
@end;

@template MethodReturnEnum(%PrimName) is
$ return ((%PrimName)_aMethod.ReturnInteger());
@end;

@template MethodReturnHandle(%PrimName) is
$ Handle(%PrimName) _res = new %PrimName(_aMethod.ReturnFHandle(),Engine());
$ return _res;
@end;

@template MethodReturnValue(%PrimName) is
$ return (%PrimName(_aMethod.ReturnFHandle(),Engine()));
@end;

@template StaticMethodReturnHandle(%PrimName) is
$ Handle(%PrimName) _res = new %PrimName(_aMethod.ReturnFHandle(),_aCurrent);
$ return _res;
@end;

@template StaticMethodReturnValue(%PrimName) is
$ return (%PrimName(_aMethod.ReturnFHandle(),_aCurrent));
@end;

-- return type async
@template AsyncMethodReturnVoid(%PrimName) is
$ delete uid.Method();
@end;

@template AsyncMethodReturnPrim(%PrimName) is
$ Standard_%PrimName _res = uid.Method()->Return%PrimName();
$ delete uid.Method();
$ return _res;
@end;

@template AsyncMethodReturnEnum(%PrimName) is
$ Standard_Integer _res = (%PrimName)uid.Method()->ReturnInteger();
$ delete uid.Method();
$ return _res;
@end;

@template AsyncMethodReturnHandle(%PrimName) is
$ Handle(%PrimName) _res = new %PrimName(uid.Method()->ReturnFHandle(),Engine());
$ delete uid.Method();
$ return _res;
@end;

@template AsyncMethodReturnValue(%PrimName) is
$ %PrimName _res = %PrimName(uid.Method()->ReturnFHandle(),Engine());
$ delete uid.Method();
$ return _res;
@end;

@template AsyncStaticMethodReturnHandle(%PrimName) is
$ Handle(%PrimName) _res = new %PrimName(uid.Method()->ReturnFHandle(),_aCurrent);
$ delete uid.Method();
$ return _res;
@end;

@template AsyncStaticMethodReturnValue(%PrimName) is
$ %PrimName _res = %PrimName(uid.Method()->ReturnFHandle(),_aCurrent);
$ delete uid.Method();
$ return _res;
@end;

-- type management : BEGIN

@template TypeMgtAncestorType(%Nb) is
$aType%Nb\^
@end;

@template TypeMgtAncestor(%Nb,%Ancestors) is
$  static Handle_Standard_Type %Nb = STANDARD_TYPE(%Ancestors);
$  if ( %Nb.IsNull()) %Nb = STANDARD_TYPE(%Ancestors);
@end;

@template TypeMgt(%TMgtClass,%TMgtInherits,%Ancestors) is
$Handle_Standard_Type& %TMgtClass_Type_()
${
$  %TMgtInherits 
$  static Handle_Standard_Type aTypeT = STANDARD_TYPE(Standard_Transient);
$  static Handle_Standard_Type aTypeTs = STANDARD_TYPE(MMgt_TShared);
$  static Handle_Standard_Type aTypeR = STANDARD_TYPE(FrontEnd_HExternRef);
$  static Handle_Standard_Transient _Ancestors[]= {%Ancestors aTypeR,aTypeTs,aTypeT,NULL};
$  static Handle_Standard_Type _aType = new Standard_Type("%TMgtClass",
$			                                 sizeof(%TMgtClass),
$			                                 1,
$			                                 (Standard_Address)_Ancestors,
$			                                 (Standard_Address)NULL);
$
$  return _aType;
$}
$
@end;
