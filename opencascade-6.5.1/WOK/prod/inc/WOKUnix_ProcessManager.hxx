// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _WOKUnix_ProcessManager_HeaderFile
#define _WOKUnix_ProcessManager_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_WOKUnix_Process_HeaderFile
#include <Handle_WOKUnix_Process.hxx>
#endif
class WOKUnix_Process;
class WOKUnix_ShellManager;
class WOKUnix_SequenceOfProcess;



class WOKUnix_ProcessManager  {
public:

  void* operator new(size_t,void* anAddress) 
  {
    return anAddress;
  }
  void* operator new(size_t size) 
  {
    return Standard::Allocate(size); 
  }
  void  operator delete(void *anAddress) 
  {
    if (anAddress) Standard::Free((Standard_Address&)anAddress); 
  }

  
  Standard_EXPORT   static  void Arm() ;
  
  Standard_EXPORT   static  void UnArm() ;
  
  Standard_EXPORT   static  void InteruptHandler() ;
  
  Standard_EXPORT   static  void ChildDeathHandler() ;
  
  Standard_EXPORT   static  void PipeHandler() ;
  
  Standard_EXPORT   static  void KillAll() ;
  
  Standard_EXPORT   static  void SetCriticalPid(const Standard_Integer apid) ;


friend class WOKUnix_Process;
friend class WOKUnix_ShellManager;



protected:





private:

  
  Standard_EXPORT   static  WOKUnix_SequenceOfProcess& Processes() ;
  
  Standard_EXPORT   static  void AddProcess(const Handle(WOKUnix_Process)& aprocess) ;
  
  Standard_EXPORT   static  void RemoveProcess(const Handle(WOKUnix_Process)& aprocess) ;
  
  Standard_EXPORT   static  void WaitProcess(const Handle(WOKUnix_Process)& aprocess) ;




};





// other Inline functions and methods (like "C++: function call" methods)


#endif
