// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _WOKernel_FileType_HeaderFile
#define _WOKernel_FileType_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_WOKernel_FileType_HeaderFile
#include <Handle_WOKernel_FileType.hxx>
#endif

#ifndef _Handle_TCollection_HAsciiString_HeaderFile
#include <Handle_TCollection_HAsciiString.hxx>
#endif
#ifndef _EDL_Template_HeaderFile
#include <EDL_Template.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Handle_TColStd_HSequenceOfHAsciiString_HeaderFile
#include <Handle_TColStd_HSequenceOfHAsciiString.hxx>
#endif
class TCollection_HAsciiString;
class Standard_ProgramError;
class EDL_Template;
class WOKUtils_Param;
class TColStd_HSequenceOfHAsciiString;


//! manages the various file types in WOK <br>
class WOKernel_FileType : public MMgt_TShared {

public:

  
  Standard_EXPORT   WOKernel_FileType();
  
  Standard_EXPORT   WOKernel_FileType(const Handle(TCollection_HAsciiString)& aname,const EDL_Template& atemplate);
  
       const Handle_TCollection_HAsciiString& Name() const;
  
       const EDL_Template& Template() const;
  //! Computes a path using a format and parameters <br>
//!          Supposes that WOKernel_FileTypeBase::SetNeededArguments <br>
//!          was called Before use. <br>
  Standard_EXPORT     Handle_TCollection_HAsciiString ComputePath(const WOKUtils_Param& params,const Handle(TCollection_HAsciiString)& afilename) ;
  
  Standard_EXPORT     Handle_TCollection_HAsciiString GetDefinition() const;
  
  Standard_EXPORT     Handle_TColStd_HSequenceOfHAsciiString GetArguments() const;
  
  Standard_EXPORT     void SetStationDependent() ;
  
  Standard_EXPORT     void UnSetStationDependent() ;
  
        Standard_Boolean IsStationDependent() const;
  
  Standard_EXPORT     void SetDBMSDependent() ;
  
  Standard_EXPORT     void UnSetDBMSDependent() ;
  
        Standard_Boolean IsDBMSDependent() const;
  
  Standard_EXPORT     void SetNestingDependent() ;
  
  Standard_EXPORT     void UnSetNestingDependent() ;
  
        Standard_Boolean IsNestingDependent() const;
  
  Standard_EXPORT     void SetEntityDependent() ;
  
  Standard_EXPORT     void UnSetEntityDependent() ;
  
        Standard_Boolean IsEntityDependent() const;
  
  Standard_EXPORT     void SetFileDependent() ;
  
  Standard_EXPORT     void UnSetFileDependent() ;
  
        Standard_Boolean IsFileDependent() const;
  
  Standard_EXPORT     void Directory() ;
  
  Standard_EXPORT     void File() ;
  
        Standard_Boolean IsFile() const;
  
        Standard_Boolean IsDirectory() const;
  
  Standard_EXPORT     Handle_TCollection_HAsciiString GetDirectory(const WOKUtils_Param& params) ;
  
  Standard_EXPORT     Handle_TCollection_HAsciiString GetFile(const WOKUtils_Param& params) ;




  DEFINE_STANDARD_RTTI(WOKernel_FileType)

protected:




private: 

  //! calculates Station and DBMS dependency for Type <br>
  Standard_EXPORT     void GetDependency() ;

Handle_TCollection_HAsciiString myname;
EDL_Template mytemplate;
Standard_Boolean mystationdep;
Standard_Boolean mydbmsdep;
Standard_Boolean mynestingdep;
Standard_Boolean myentitydep;
Standard_Boolean myfiledep;
Standard_Boolean myisrep;


};


#include <WOKernel_FileType.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
