// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _WOKNT_RegExp_HeaderFile
#define _WOKNT_RegExp_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_WOKNT_RegExp_HeaderFile
#include <Handle_WOKNT_RegExp.hxx>
#endif

#ifndef _Standard_Address_HeaderFile
#include <Standard_Address.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Handle_TCollection_HAsciiString_HeaderFile
#include <Handle_TCollection_HAsciiString.hxx>
#endif
#ifndef _WOKNT_RESyntax_HeaderFile
#include <WOKNT_RESyntax.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class Standard_ProgramError;
class TCollection_HAsciiString;


//! provides regular expression matching and searching <br>
class WOKNT_RegExp : public MMgt_TShared {

public:

  //! creates a class instance <br>
  Standard_EXPORT   WOKNT_RegExp();
  //! creates a class instance with given pattern that denotes a set <br>
//!          of strings. Defines a translation table <aTransTbl> and <br>
//!          its length <aTblLen> to perform character translation. <br>
//!          Supply NULL for <aTransTbl> and zero value for <aTblLen> <br>
//!          if no translation necessary. It is possible to set <br>
//!          syntax of the regular expression by meaning <aSyntax> <br>
//!          parameter. <br>
//!  Warning: raises if syntax of the regular expression given is incorrect <br>
  Standard_EXPORT   WOKNT_RegExp(const Handle(TCollection_HAsciiString)& aPattern,const WOKNT_RESyntax aSyntax = WOKNT_RESyntaxAWK,const Standard_Address aTransTbl = NULL,const Standard_Integer aTblLen = 0);
  //! destroys all resources attached to the class instanse <br>
  Standard_EXPORT     void Destroy() ;
~WOKNT_RegExp()
{
  Destroy();
}
  //! sets a new match pattern and possibly a new pattern syntax <br>
//!  Warning: raises if the syntax given is incorrect <br>
  Standard_EXPORT     void SetPattern(const Handle(TCollection_HAsciiString)& aPattern,const WOKNT_RESyntax aSyntax = WOKNT_RESyntaxAWK,const Standard_Address aTransTbl = NULL,const Standard_Integer aTblLen = 0) ;
  //! searches a sub-string in the <aString> which matches <br>
//!          the specified pattern starting at index <aStartPos>. <br>
//!          Returns an index of the match position on success. <br>
//!          Returns -1 if no match was found. <br>
//!          Returns -2 if error was occur. <br>
//!  Warning: raises if no search pattern was set <br>
  Standard_EXPORT     Standard_Integer Search(const Handle(TCollection_HAsciiString)& aString,const Standard_Integer aStartPos = 1) const;
  //! match the pattern given against the string <aString> <br>
//!          starting at index <aStartPos>. Do not consider matching <br>
//!          past the position <aStopPos>. <br>
//!          Returns the length of the string matched on success. <br>
//!          Returns -1 if no match was found. <br>
//!          Returns -2 if error was occur. <br>
//!  Warning: raises if no search pattern was set <br>
  Standard_EXPORT     Standard_Integer Match(const Handle(TCollection_HAsciiString)& aString,const Standard_Integer aStartPos = 1,const Standard_Integer aStopPos = 1) const;



  DEFINE_STANDARD_RTTI(WOKNT_RegExp)

protected:




private: 


Standard_Address myBuffer;
Standard_Boolean myAlloc;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
