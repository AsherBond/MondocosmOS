// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _EDL_HeaderFile
#define _EDL_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _EDL_Error_HeaderFile
#include <EDL_Error.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
class EDL_API;
class EDL_Variable;
class EDL_MapOfVariable;
class EDL_SequenceOfVariable;
class EDL_HSequenceOfVariable;
class EDL_Template;
class EDL_MapOfTemplate;
class EDL_Library;
class EDL_MapOfLibrary;
class EDL_File;
class EDL_MapOfFile;
class EDL_StackOfBoolean;
class EDL_Interpretor;
class EDL_DataMapNodeOfMapOfVariable;
class EDL_DataMapIteratorOfMapOfVariable;
class EDL_SequenceNodeOfSequenceOfVariable;
class EDL_DataMapNodeOfMapOfTemplate;
class EDL_DataMapIteratorOfMapOfTemplate;
class EDL_DataMapNodeOfMapOfLibrary;
class EDL_DataMapIteratorOfMapOfLibrary;
class EDL_DataMapNodeOfMapOfFile;
class EDL_DataMapIteratorOfMapOfFile;
class EDL_StackNodeOfStackOfBoolean;
class EDL_StackIteratorOfStackOfBoolean;



class EDL  {
public:

  void* operator new(size_t,void* anAddress) 
  {
    return anAddress;
  }
  void* operator new(size_t size) 
  {
    return Standard::Allocate(size); 
  }
  void  operator delete(void *anAddress) 
  {
    if (anAddress) Standard::Free((Standard_Address&)anAddress); 
  }

  
  Standard_EXPORT   static  void PrintError(const EDL_Error anError,const Standard_CString anArg) ;





protected:





private:




friend class EDL_API;
friend class EDL_Variable;
friend class EDL_MapOfVariable;
friend class EDL_SequenceOfVariable;
friend class EDL_HSequenceOfVariable;
friend class EDL_Template;
friend class EDL_MapOfTemplate;
friend class EDL_Library;
friend class EDL_MapOfLibrary;
friend class EDL_File;
friend class EDL_MapOfFile;
friend class EDL_StackOfBoolean;
friend class EDL_Interpretor;
friend class EDL_DataMapNodeOfMapOfVariable;
friend class EDL_DataMapIteratorOfMapOfVariable;
friend class EDL_SequenceNodeOfSequenceOfVariable;
friend class EDL_DataMapNodeOfMapOfTemplate;
friend class EDL_DataMapIteratorOfMapOfTemplate;
friend class EDL_DataMapNodeOfMapOfLibrary;
friend class EDL_DataMapIteratorOfMapOfLibrary;
friend class EDL_DataMapNodeOfMapOfFile;
friend class EDL_DataMapIteratorOfMapOfFile;
friend class EDL_StackNodeOfStackOfBoolean;
friend class EDL_StackIteratorOfStackOfBoolean;

};





// other Inline functions and methods (like "C++: function call" methods)


#endif
