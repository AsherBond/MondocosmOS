// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _WOKernel_Session_HeaderFile
#define _WOKernel_Session_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_WOKernel_Session_HeaderFile
#include <Handle_WOKernel_Session.hxx>
#endif

#ifndef _WOKernel_StationID_HeaderFile
#include <WOKernel_StationID.hxx>
#endif
#ifndef _WOKernel_DBMSID_HeaderFile
#include <WOKernel_DBMSID.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _WOKernel_DataMapOfHAsciiStringOfFactory_HeaderFile
#include <WOKernel_DataMapOfHAsciiStringOfFactory.hxx>
#endif
#ifndef _WOKernel_DataMapOfHAsciiStringOfWarehouse_HeaderFile
#include <WOKernel_DataMapOfHAsciiStringOfWarehouse.hxx>
#endif
#ifndef _WOKernel_DataMapOfHAsciiStringOfWorkshop_HeaderFile
#include <WOKernel_DataMapOfHAsciiStringOfWorkshop.hxx>
#endif
#ifndef _WOKernel_DataMapOfHAsciiStringOfParcel_HeaderFile
#include <WOKernel_DataMapOfHAsciiStringOfParcel.hxx>
#endif
#ifndef _WOKernel_DataMapOfHAsciiStringOfWorkbench_HeaderFile
#include <WOKernel_DataMapOfHAsciiStringOfWorkbench.hxx>
#endif
#ifndef _WOKernel_DataMapOfHAsciiStringOfDevUnit_HeaderFile
#include <WOKernel_DataMapOfHAsciiStringOfDevUnit.hxx>
#endif
#ifndef _Handle_WOKernel_GlobalFileTypeBase_HeaderFile
#include <Handle_WOKernel_GlobalFileTypeBase.hxx>
#endif
#ifndef _WOKernel_Entity_HeaderFile
#include <WOKernel_Entity.hxx>
#endif
#ifndef _Handle_TCollection_HAsciiString_HeaderFile
#include <Handle_TCollection_HAsciiString.hxx>
#endif
#ifndef _Handle_WOKernel_FileTypeBase_HeaderFile
#include <Handle_WOKernel_FileTypeBase.hxx>
#endif
#ifndef _Handle_WOKernel_Entity_HeaderFile
#include <Handle_WOKernel_Entity.hxx>
#endif
#ifndef _Handle_WOKUtils_HSequenceOfParamItem_HeaderFile
#include <Handle_WOKUtils_HSequenceOfParamItem.hxx>
#endif
#ifndef _Handle_WOKernel_Factory_HeaderFile
#include <Handle_WOKernel_Factory.hxx>
#endif
#ifndef _Handle_WOKernel_Warehouse_HeaderFile
#include <Handle_WOKernel_Warehouse.hxx>
#endif
#ifndef _Handle_WOKernel_Workshop_HeaderFile
#include <Handle_WOKernel_Workshop.hxx>
#endif
#ifndef _Handle_WOKernel_UnitNesting_HeaderFile
#include <Handle_WOKernel_UnitNesting.hxx>
#endif
#ifndef _Handle_WOKernel_Workbench_HeaderFile
#include <Handle_WOKernel_Workbench.hxx>
#endif
#ifndef _Handle_WOKernel_Parcel_HeaderFile
#include <Handle_WOKernel_Parcel.hxx>
#endif
#ifndef _Handle_WOKernel_DevUnit_HeaderFile
#include <Handle_WOKernel_DevUnit.hxx>
#endif
#ifndef _Handle_TColStd_HSequenceOfHAsciiString_HeaderFile
#include <Handle_TColStd_HSequenceOfHAsciiString.hxx>
#endif
class WOKernel_GlobalFileTypeBase;
class Standard_ProgramError;
class WOKernel_EntityIterator;
class TCollection_HAsciiString;
class WOKernel_FileTypeBase;
class WOKernel_Entity;
class WOKUtils_HSequenceOfParamItem;
class WOKernel_Factory;
class WOKernel_Warehouse;
class WOKernel_Workshop;
class WOKernel_UnitNesting;
class WOKernel_Workbench;
class WOKernel_Parcel;
class WOKernel_DevUnit;
class TColStd_HSequenceOfHAsciiString;


//! A WOK user session <br>
//!          Manages WOK process lifetime <br>
class WOKernel_Session : public WOKernel_Entity {

public:

  //! instantiates Session does not Open It !!! <br>
  Standard_EXPORT   WOKernel_Session(const Handle(TCollection_HAsciiString)& aname);
  
  Standard_EXPORT   virtual  Handle_TCollection_HAsciiString EntityCode() const;
  
  Standard_EXPORT     Handle_WOKernel_FileTypeBase GetFileTypeBase(const Handle(WOKernel_Entity)& anent) const;
  
  Standard_EXPORT   virtual  Handle_WOKUtils_HSequenceOfParamItem BuildParameters(const Handle(WOKUtils_HSequenceOfParamItem)& someparams,const Standard_Boolean usedefaults) ;
  //! Nothing to do here <br>
  Standard_EXPORT   virtual  void Build(const Handle(WOKUtils_HSequenceOfParamItem)& someparams) ;
  //! Nothing either <br>
  Standard_EXPORT   virtual  void Destroy() ;
  
  Standard_EXPORT   virtual  void Open() ;
  //! Loads factory list <br>
  Standard_EXPORT     void Open(const Handle(TCollection_HAsciiString)& aroot,const Handle(TCollection_HAsciiString)& libpath) ;
  //! closes session <br>
//!          automatically closes opened entities in session <br>
  Standard_EXPORT   virtual  void Close() ;
  //! Adds an Entity to the map <br>
  Standard_EXPORT     Standard_Boolean AddEntity(const Handle(WOKernel_Entity)& anentity) ;
  //! Removes an Entity to the map <br>
  Standard_EXPORT     Standard_Boolean RemoveEntity(const Handle(WOKernel_Entity)& anentity) ;
  //! Gets Entity Handle with its name <br>
  Standard_EXPORT     Standard_Boolean IsKnownEntity(const Handle(TCollection_HAsciiString)& auniquename) const;
  //! Gets Entity Handle with its name <br>
  Standard_EXPORT     Standard_Boolean IsKnownEntity(const Handle(WOKernel_Entity)& anentity) const;
  //! Clears Entity Map <br>
  Standard_EXPORT     void ClearEntities() ;
  
  Standard_EXPORT     Standard_Boolean IsFactory(const Handle(TCollection_HAsciiString)& aname) const;
  
  Standard_EXPORT     Standard_Boolean IsWarehouse(const Handle(TCollection_HAsciiString)& aname) const;
  
  Standard_EXPORT     Standard_Boolean IsWorkshop(const Handle(TCollection_HAsciiString)& aname) const;
  
  Standard_EXPORT     Standard_Boolean IsWorkbench(const Handle(TCollection_HAsciiString)& aname) const;
  
  Standard_EXPORT     Standard_Boolean IsUnitNesting(const Handle(TCollection_HAsciiString)& aname) const;
  
  Standard_EXPORT     Standard_Boolean IsParcel(const Handle(TCollection_HAsciiString)& aname) const;
  
  Standard_EXPORT     Standard_Boolean IsDevUnit(const Handle(TCollection_HAsciiString)& aname) const;
  
  Standard_EXPORT    const Handle_WOKernel_Entity& GetEntity(const Handle(TCollection_HAsciiString)& aname) const;
  
  Standard_EXPORT    const Handle_WOKernel_Factory& GetFactory(const Handle(TCollection_HAsciiString)& aname) const;
  
  Standard_EXPORT    const Handle_WOKernel_Warehouse& GetWarehouse(const Handle(TCollection_HAsciiString)& aname) const;
  
  Standard_EXPORT    const Handle_WOKernel_Workshop& GetWorkshop(const Handle(TCollection_HAsciiString)& aname) const;
  
  Standard_EXPORT    const Handle_WOKernel_UnitNesting& GetUnitNesting(const Handle(TCollection_HAsciiString)& aname) const;
  
  Standard_EXPORT    const Handle_WOKernel_Workbench& GetWorkbench(const Handle(TCollection_HAsciiString)& aname) const;
  
  Standard_EXPORT    const Handle_WOKernel_Parcel& GetParcel(const Handle(TCollection_HAsciiString)& aname) const;
  
  Standard_EXPORT    const Handle_WOKernel_DevUnit& GetDevUnit(const Handle(TCollection_HAsciiString)& aname) const;
  //! renvoie les entites matchant un nom ou une partie de FullNames <br>
  Standard_EXPORT     Handle_TColStd_HSequenceOfHAsciiString GetMatchingEntities(const Handle(TCollection_HAsciiString)& aname,const Standard_Boolean fullpath = Standard_True) const;
  //! gives the factory sequence of Session <br>
  Standard_EXPORT     Handle_TColStd_HSequenceOfHAsciiString Factories() const;
  //! Updates files ATLIST with myfactories <br>
  Standard_EXPORT     void DumpFactoryList() const;
  //! Ajouter un atelier a la liste et met a jour <br>
//!          le fichier ATLIST <br>
  Standard_EXPORT     void AddFactory(const Handle(WOKernel_Factory)& afact) ;
  //! Removes the Factory from ATLIST <br>
  Standard_EXPORT     void RemoveFactory(const Handle(WOKernel_Factory)& afact) ;
  
  Standard_EXPORT     void SetStation(const WOKernel_StationID ast) ;
  
        WOKernel_StationID Station() const;
  
  Standard_EXPORT     void SetDBMSystem(const WOKernel_DBMSID adb) ;
  
        WOKernel_DBMSID DBMSystem() const;
  
  Standard_EXPORT     Standard_Boolean DebugMode() const;
  
  Standard_EXPORT     void SetDebugMode() ;
  
  Standard_EXPORT     void UnsetDebugMode() ;


friend class WOKernel_EntityIterator;


  DEFINE_STANDARD_RTTI(WOKernel_Session)

protected:




private: 


WOKernel_StationID mystation;
WOKernel_DBMSID mydbms;
Standard_Boolean mydebug;
WOKernel_DataMapOfHAsciiStringOfFactory myfactories;
WOKernel_DataMapOfHAsciiStringOfWarehouse mywarehouses;
WOKernel_DataMapOfHAsciiStringOfWorkshop myworkshops;
WOKernel_DataMapOfHAsciiStringOfParcel myparcels;
WOKernel_DataMapOfHAsciiStringOfWorkbench myworkbenches;
WOKernel_DataMapOfHAsciiStringOfDevUnit myunits;
Handle_WOKernel_GlobalFileTypeBase myfiletypebases;


};


#include <WOKernel_Session.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
