// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _WOKTclTools_Interpretor_HeaderFile
#define _WOKTclTools_Interpretor_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_WOKTclTools_Interpretor_HeaderFile
#include <Handle_WOKTclTools_Interpretor.hxx>
#endif

#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _WOKTclTools_PInterp_HeaderFile
#include <WOKTclTools_PInterp.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
#ifndef _WOKTclTools_CommandFunction_HeaderFile
#include <WOKTclTools_CommandFunction.hxx>
#endif
#ifndef _WOKTclTools_WokCommand_HeaderFile
#include <WOKTclTools_WokCommand.hxx>
#endif
#ifndef _WOKTclTools_ExitHandler_HeaderFile
#include <WOKTclTools_ExitHandler.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Character_HeaderFile
#include <Standard_Character.hxx>
#endif
class WOKTools_Return;


//! Provides  an  encapsulation of the TCL interpretor <br>
//!          to define WOKTclTools commands. <br>
class WOKTclTools_Interpretor : public MMgt_TShared {

public:

  
  Standard_EXPORT   WOKTclTools_Interpretor();
  
  Standard_EXPORT   WOKTclTools_Interpretor(const WOKTclTools_PInterp& anInterp);
  //! Creates a  new command  with name <Command>,  help <br>
//!          string <Help> in group <Group>. <br>
//!          <Function> implement the function. <br>
  Standard_EXPORT     void Add(const Standard_CString Command,const Standard_CString Help,const WOKTclTools_CommandFunction Function,const Standard_CString Group = "User Commands") ;
  
  Standard_EXPORT     void Add(const Standard_CString Command,const Standard_CString Help,const WOKTclTools_WokCommand Function,const Standard_CString Group = "User Commands") ;
  
  Standard_EXPORT     void AddExitHandler(const WOKTclTools_ExitHandler Function) ;
  
  Standard_EXPORT     void DeleteExitHandler(const WOKTclTools_ExitHandler Function) ;
  
  Standard_EXPORT     Standard_Boolean IsCmdName(const Standard_CString Command) ;
  //! Removes   <Command>, returns true  if success (the <br>
//!          command existed). <br>
  Standard_EXPORT     Standard_Boolean Remove(const Standard_CString Command) ;
  
  Standard_EXPORT     Standard_Integer PkgProvide(const Standard_CString aname,const Standard_CString aversion) ;
  
  Standard_EXPORT     Standard_Integer TreatReturn(const WOKTools_Return& values) ;
  
  Standard_EXPORT     Standard_CString Result() const;
  
  Standard_EXPORT     Standard_Boolean GetReturnValues(WOKTools_Return& retval) const;
  //! Resets the result to empty string <br>
  Standard_EXPORT     void Reset() ;
  //! Appends to the result <br>
  Standard_EXPORT     void Append(const Standard_CString Result) ;
  //! Appends  to the result <br>
  Standard_EXPORT     void Append(const Standard_Integer Result) ;
  //! Appends  to the result <br>
  Standard_EXPORT     void Append(const Standard_Real Result) ;
  //! Appends to the result the string as a list element <br>
  Standard_EXPORT     void AppendElement(const Standard_CString Result) ;
  //! Eval the script and returns OK = 0, ERROR = 1 <br>
  Standard_EXPORT     Standard_Integer Eval(const Standard_CString Script) ;
  //! Eval the script and returns OK = 0, ERROR = 1 <br>
//!          Store the script in the history record. <br>
  Standard_EXPORT     Standard_Integer RecordAndEval(const Standard_CString Script,const Standard_Integer Flags = 0) ;
  //! Eval the content on the file and returns status <br>
  Standard_EXPORT     Standard_Integer EvalFile(const Standard_CString FileName) ;
  //! Returns True if the script is complete, no pending <br>
//!          closing braces. (}) <br>
  Standard_EXPORT   static  Standard_Boolean Complete(const Standard_CString Script) ;
  
  Standard_EXPORT     void Destroy() ;
~WOKTclTools_Interpretor()
{
  Destroy();
}
  
  Standard_EXPORT     void Set(const WOKTclTools_PInterp& anInterp) ;
  
  Standard_EXPORT     WOKTclTools_PInterp Interp() const;
  
  Standard_EXPORT   static  Handle_WOKTclTools_Interpretor& Current() ;
  
  Standard_EXPORT   static  void SetEndMessageProc(const Standard_CString aproc) ;
  
  Standard_EXPORT   static  void UnSetEndMessageProc() ;
  
  Standard_EXPORT   static  Standard_CString& EndMessageProc() ;
  
  Standard_EXPORT   static  void SetEndMessageArgs(const Standard_CString aArgs) ;
  
  Standard_EXPORT   static  void UnSetEndMessageArgs() ;
  
  Standard_EXPORT   static  Standard_CString& EndMessageArgs() ;
  
  Standard_EXPORT     void TreatMessage(const Standard_Boolean newline,const Standard_Character atype,const Standard_CString amsg) const;



  DEFINE_STANDARD_RTTI(WOKTclTools_Interpretor)

protected:




private: 


Standard_Boolean isAllocated;
WOKTclTools_PInterp myInterp;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
