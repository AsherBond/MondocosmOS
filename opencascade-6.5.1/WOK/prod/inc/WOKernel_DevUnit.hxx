// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _WOKernel_DevUnit_HeaderFile
#define _WOKernel_DevUnit_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_WOKernel_DevUnit_HeaderFile
#include <Handle_WOKernel_DevUnit.hxx>
#endif

#ifndef _Handle_WOKernel_UnitTypeDescr_HeaderFile
#include <Handle_WOKernel_UnitTypeDescr.hxx>
#endif
#ifndef _Handle_TColStd_HSequenceOfHAsciiString_HeaderFile
#include <Handle_TColStd_HSequenceOfHAsciiString.hxx>
#endif
#ifndef _WOKernel_Entity_HeaderFile
#include <WOKernel_Entity.hxx>
#endif
#ifndef _Handle_TCollection_HAsciiString_HeaderFile
#include <Handle_TCollection_HAsciiString.hxx>
#endif
#ifndef _Handle_WOKernel_UnitNesting_HeaderFile
#include <Handle_WOKernel_UnitNesting.hxx>
#endif
#ifndef _Standard_Character_HeaderFile
#include <Standard_Character.hxx>
#endif
#ifndef _Handle_WOKUtils_HSequenceOfParamItem_HeaderFile
#include <Handle_WOKUtils_HSequenceOfParamItem.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_WOKernel_File_HeaderFile
#include <Handle_WOKernel_File.hxx>
#endif
#ifndef _Handle_WOKernel_HSequenceOfFile_HeaderFile
#include <Handle_WOKernel_HSequenceOfFile.hxx>
#endif
#ifndef _Handle_WOKernel_Locator_HeaderFile
#include <Handle_WOKernel_Locator.hxx>
#endif
#ifndef _Handle_WOKUtils_Path_HeaderFile
#include <Handle_WOKUtils_Path.hxx>
#endif
#ifndef _Handle_WOKernel_UnitGraph_HeaderFile
#include <Handle_WOKernel_UnitGraph.hxx>
#endif
class WOKernel_UnitTypeDescr;
class TColStd_HSequenceOfHAsciiString;
class Standard_ProgramError;
class TCollection_HAsciiString;
class WOKernel_UnitNesting;
class WOKUtils_HSequenceOfParamItem;
class WOKernel_File;
class WOKernel_HSequenceOfFile;
class WOKernel_Locator;
class WOKUtils_Path;
class WOKernel_UnitGraph;



class WOKernel_DevUnit : public WOKernel_Entity {

public:

  
  Standard_EXPORT   WOKernel_DevUnit(const Handle(WOKernel_UnitTypeDescr)& atype,const Handle(TCollection_HAsciiString)& aname,const Handle(WOKernel_UnitNesting)& anesting);
  
  Standard_EXPORT   virtual  Handle_TCollection_HAsciiString EntityCode() const;
  
  Standard_EXPORT     Standard_Character TypeCode() const;
  
  Standard_EXPORT    const Handle_TCollection_HAsciiString& Type() const;
  //! constructs Sequence of Parameters Needed by Entity <br>
//!          to be built. <br>
//!          Checks their consistancy <br>
  Standard_EXPORT   virtual  Handle_WOKUtils_HSequenceOfParamItem BuildParameters(const Handle(WOKUtils_HSequenceOfParamItem)& someparams,const Standard_Boolean usedefaults) ;
  //! Creates On disk the Unit <br>
//!          it must neither be opened or existing <br>
//!          Parameters must all be present in someparams <br>
  Standard_EXPORT   virtual  void Build(const Handle(WOKUtils_HSequenceOfParamItem)& someparams) ;
  //! Destroys Unit on Disk <br>
//!          it must not be opened <br>
  Standard_EXPORT   virtual  void Destroy() ;
  
  Standard_EXPORT   virtual  void Open() ;
  
  Standard_EXPORT   virtual  void Close() ;
  
  Standard_EXPORT     void AddFile(const Handle(WOKernel_File)& afile) ;
  
  Standard_EXPORT     void RemoveFile(const Handle(WOKernel_File)& afile) ;
  
  Standard_EXPORT     Handle_TColStd_HSequenceOfHAsciiString ReadSingleFileList(const Handle(WOKernel_File)& afile) const;
  
  Standard_EXPORT     void WriteSingleFileList(const Handle(WOKernel_File)& afile,const Handle(WOKernel_HSequenceOfFile)& files) const;
  
  Standard_EXPORT     void ReadFileList(const Handle(WOKernel_Locator)& alocator) ;
  //! Updates FileList files <br>
  Standard_EXPORT     void DumpFileList(const Handle(WOKernel_Locator)& alocator) const;
  
  Standard_EXPORT     Standard_Boolean SearchInFileList(const Handle(WOKernel_Locator)& alocator,const Handle(TCollection_HAsciiString)& aname) ;
  
  Standard_EXPORT     Handle_TCollection_HAsciiString NestedFileName(const Handle(TCollection_HAsciiString)& atype,const Handle(TCollection_HAsciiString)& aname) ;
  
  Standard_EXPORT     void SetFileList(const Handle(TColStd_HSequenceOfHAsciiString)& aseq) ;
  
  Standard_EXPORT     Handle_TColStd_HSequenceOfHAsciiString FileList() const;
  
  Standard_EXPORT     Handle_WOKernel_File ImplDepFile(const Handle(WOKernel_Locator)& alocator,const Handle(TCollection_HAsciiString)& aname) const;
  
  Standard_EXPORT     Handle_TColStd_HSequenceOfHAsciiString ReadImplDepFile(const Handle(WOKUtils_Path)& afile,const Handle(WOKernel_Locator)& alocator,const Standard_Boolean aflag = Standard_False) const;
  
  Standard_EXPORT   virtual  Handle_TColStd_HSequenceOfHAsciiString ImplementationDepList(const Handle(WOKernel_UnitGraph)& aunitgraph) ;
  
  Standard_EXPORT     Handle_TColStd_HSequenceOfHAsciiString ImplementationDepList(const Handle(TCollection_HAsciiString)& apart,const Handle(WOKernel_UnitGraph)& aunitgraph) ;
  
  Standard_EXPORT   static  Handle_TColStd_HSequenceOfHAsciiString ImplementationDep(const Handle(WOKernel_UnitGraph)& aunitgraph,const Handle(TCollection_HAsciiString)& aname,const Handle(TColStd_HSequenceOfHAsciiString)& alist) ;
  
  Standard_EXPORT   virtual  Handle_TColStd_HSequenceOfHAsciiString ImplementationDep(const Handle(WOKernel_UnitGraph)& aunitgraph) ;
  
  Standard_EXPORT     Handle_TColStd_HSequenceOfHAsciiString ImplementationDep(const Handle(TCollection_HAsciiString)& apart,const Handle(WOKernel_UnitGraph)& aunitgraph) ;
  
  Standard_EXPORT     Handle_TColStd_HSequenceOfHAsciiString ImplClients(const Handle(WOKernel_UnitGraph)& aclientgraph) ;




  DEFINE_STANDARD_RTTI(WOKernel_DevUnit)

protected:

  
  Standard_EXPORT   virtual  void GetParameters() ;



private: 


Handle_WOKernel_UnitTypeDescr mytype;
Handle_TColStd_HSequenceOfHAsciiString myfiles;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
