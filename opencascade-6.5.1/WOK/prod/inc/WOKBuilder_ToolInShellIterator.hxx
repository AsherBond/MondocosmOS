// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _WOKBuilder_ToolInShellIterator_HeaderFile
#define _WOKBuilder_ToolInShellIterator_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Handle_TCollection_HAsciiString_HeaderFile
#include <Handle_TCollection_HAsciiString.hxx>
#endif
#ifndef _WOKBuilder_DataMapOfHAsciiStringOfToolInShell_HeaderFile
#include <WOKBuilder_DataMapOfHAsciiStringOfToolInShell.hxx>
#endif
#ifndef _WOKUtils_Param_HeaderFile
#include <WOKUtils_Param.hxx>
#endif
#ifndef _Handle_WOKUtils_Shell_HeaderFile
#include <Handle_WOKUtils_Shell.hxx>
#endif
#ifndef _Handle_WOKUtils_Path_HeaderFile
#include <Handle_WOKUtils_Path.hxx>
#endif
#ifndef _Handle_WOKBuilder_HSequenceOfToolInShell_HeaderFile
#include <Handle_WOKBuilder_HSequenceOfToolInShell.hxx>
#endif
#ifndef _Handle_WOKBuilder_HSequenceOfEntity_HeaderFile
#include <Handle_WOKBuilder_HSequenceOfEntity.hxx>
#endif
#ifndef _Handle_WOKBuilder_ToolInShell_HeaderFile
#include <Handle_WOKBuilder_ToolInShell.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_WOKBuilder_Entity_HeaderFile
#include <Handle_WOKBuilder_Entity.hxx>
#endif
class TCollection_HAsciiString;
class WOKUtils_Shell;
class WOKUtils_Path;
class WOKBuilder_HSequenceOfToolInShell;
class WOKBuilder_HSequenceOfEntity;
class WOKUtils_Param;
class WOKBuilder_ToolInShell;
class WOKBuilder_Entity;



class WOKBuilder_ToolInShellIterator  {
public:

  void* operator new(size_t,void* anAddress) 
  {
    return anAddress;
  }
  void* operator new(size_t size) 
  {
    return Standard::Allocate(size); 
  }
  void  operator delete(void *anAddress) 
  {
    if (anAddress) Standard::Free((Standard_Address&)anAddress); 
  }

  
  Standard_EXPORT   WOKBuilder_ToolInShellIterator(const Handle(TCollection_HAsciiString)& toolgroup,const WOKUtils_Param& Param);
  
  Standard_EXPORT   WOKBuilder_ToolInShellIterator(const Handle(WOKBuilder_HSequenceOfToolInShell)& tools);
  
  Standard_EXPORT   WOKBuilder_ToolInShellIterator(const Handle(TCollection_HAsciiString)& toolgroup,const Handle(WOKUtils_Shell)& ashell,const Handle(WOKUtils_Path)& adir,const WOKUtils_Param& Param);
  
  Standard_EXPORT     void Destroy() ;
Standard_EXPORT virtual ~WOKBuilder_ToolInShellIterator () {}
  
  Standard_EXPORT   virtual  void Init(const Handle(WOKUtils_Shell)& ashell,const Handle(WOKUtils_Path)& adir) ;
  
  Standard_EXPORT     void SetShell(const Handle(WOKUtils_Shell)& ashell) ;
  
  Standard_EXPORT     Handle_WOKUtils_Shell Shell() const;
  
  Standard_EXPORT     void SetParam(const WOKUtils_Param& Param) ;
  
  Standard_EXPORT     WOKUtils_Param Param() const;
  
  Standard_EXPORT     void SetOutputDir(const Handle(WOKUtils_Path)& apath) ;
  
  Standard_EXPORT     Handle_WOKUtils_Path OutputDir() const;
  
  Standard_EXPORT   virtual  Handle_WOKBuilder_ToolInShell GetTool(const Handle(TCollection_HAsciiString)& aname,const WOKUtils_Param& params) const;
  
  Standard_EXPORT   virtual  Standard_Integer LoadGroup() ;
  
  Standard_EXPORT     Handle_WOKBuilder_HSequenceOfToolInShell Tools() const;
  
  Standard_EXPORT     Standard_Boolean IsTreatedExtension(const Handle(TCollection_HAsciiString)& anext) const;
  
  Standard_EXPORT     Handle_WOKBuilder_ToolInShell AppropriateTool(const Handle(WOKBuilder_Entity)& anent) const;
  
  Standard_EXPORT     Handle_WOKBuilder_HSequenceOfEntity Produces() const;





protected:



Handle_WOKBuilder_HSequenceOfEntity myproduction;


private:



Handle_TCollection_HAsciiString mygroup;
WOKBuilder_DataMapOfHAsciiStringOfToolInShell myexts;
WOKUtils_Param myparams;
Handle_WOKUtils_Shell myshell;
Handle_WOKUtils_Path myoutdir;
Handle_WOKBuilder_HSequenceOfToolInShell mytools;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
