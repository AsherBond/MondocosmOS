// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _WOKAPI_Workbench_HeaderFile
#define _WOKAPI_Workbench_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _WOKAPI_Entity_HeaderFile
#include <WOKAPI_Entity.hxx>
#endif
#ifndef _Handle_TCollection_HAsciiString_HeaderFile
#include <Handle_TCollection_HAsciiString.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_WOKUtils_HSequenceOfParamItem_HeaderFile
#include <Handle_WOKUtils_HSequenceOfParamItem.hxx>
#endif
#ifndef _Handle_WOKTools_HSequenceOfDefine_HeaderFile
#include <Handle_WOKTools_HSequenceOfDefine.hxx>
#endif
#ifndef _Handle_TColStd_HSequenceOfHAsciiString_HeaderFile
#include <Handle_TColStd_HSequenceOfHAsciiString.hxx>
#endif
class WOKAPI_Entity;
class WOKAPI_Session;
class TCollection_HAsciiString;
class WOKUtils_HSequenceOfParamItem;
class WOKTools_HSequenceOfDefine;
class TColStd_SequenceOfHAsciiString;
class WOKAPI_SequenceOfWorkbench;
class WOKAPI_SequenceOfEntity;
class WOKAPI_SequenceOfUnit;
class TColStd_HSequenceOfHAsciiString;


//! Workbench Manipulation <br>
class WOKAPI_Workbench  : public WOKAPI_Entity {
public:

  void* operator new(size_t,void* anAddress) 
  {
    return anAddress;
  }
  void* operator new(size_t size) 
  {
    return Standard::Allocate(size); 
  }
  void  operator delete(void *anAddress) 
  {
    if (anAddress) Standard::Free((Standard_Address&)anAddress); 
  }

  
  Standard_EXPORT   WOKAPI_Workbench();
  
  Standard_EXPORT   WOKAPI_Workbench(const WOKAPI_Entity& aent);
  
  Standard_EXPORT   WOKAPI_Workbench(const WOKAPI_Session& asession,const Handle(TCollection_HAsciiString)& aname,const Standard_Boolean verbose = Standard_False,const Standard_Boolean getit = Standard_True);
  
  Standard_EXPORT     Handle_WOKUtils_HSequenceOfParamItem BuildParameters(const WOKAPI_Session& asession,const Handle(TCollection_HAsciiString)& apath,const Handle(TCollection_HAsciiString)& afather,const Handle(WOKTools_HSequenceOfDefine)& defines,const Standard_Boolean usedefaults) ;
  
  Standard_EXPORT     Standard_Boolean Build(const WOKAPI_Session& asession,const Handle(TCollection_HAsciiString)& apath,const Handle(TCollection_HAsciiString)& afather,const Handle(WOKTools_HSequenceOfDefine)& defines,const Standard_Boolean usedefaults) ;
  
  Standard_EXPORT   virtual  Standard_Boolean Destroy() ;
  
  Standard_EXPORT     Handle_TCollection_HAsciiString KnownTypeKeys() const;
  
  Standard_EXPORT     void KnownTypeNames(TColStd_SequenceOfHAsciiString& aseq) const;
  
  Standard_EXPORT   virtual  Standard_Boolean IsValid() const;
  
  Standard_EXPORT     Standard_Boolean ChangeFather(const WOKAPI_Workbench& afather) const;
  
  Standard_EXPORT     WOKAPI_Workbench Father() const;
  
  Standard_EXPORT     void Ancestors(WOKAPI_SequenceOfWorkbench& benchseq) const;
  
  Standard_EXPORT   virtual  Standard_Boolean NestedEntities(WOKAPI_SequenceOfEntity& aseq) const;
  
  Standard_EXPORT     void Units(WOKAPI_SequenceOfUnit& unitseq) const;
  
  Standard_EXPORT     void UnitsOfType(const Handle(TCollection_HAsciiString)& type,WOKAPI_SequenceOfUnit& unitseq,const Standard_Boolean clearseq = Standard_True) const;
  
  Standard_EXPORT     void Toolkits(WOKAPI_SequenceOfUnit& tkseq) const;
  
  Standard_EXPORT     void ImplSuppliers(const Handle(TCollection_HAsciiString)& aunitname,WOKAPI_SequenceOfUnit& unitseq) const;
  
  Standard_EXPORT     void ImplClients(const Handle(TCollection_HAsciiString)& aunitname,WOKAPI_SequenceOfUnit& unitseq) const;
  
  Standard_EXPORT     void SortUnitList(const Handle(TColStd_HSequenceOfHAsciiString)& aunitlist,Handle(TColStd_HSequenceOfHAsciiString)& asortedunitlist) const;





protected:





private:





};





// other Inline functions and methods (like "C++: function call" methods)


#endif
