// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _MS_SequenceOfExecFile_HeaderFile
#define _MS_SequenceOfExecFile_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _TCollection_BaseSequence_HeaderFile
#include <TCollection_BaseSequence.hxx>
#endif
#ifndef _Handle_MS_ExecFile_HeaderFile
#include <Handle_MS_ExecFile.hxx>
#endif
#ifndef _Handle_MS_SequenceNodeOfSequenceOfExecFile_HeaderFile
#include <Handle_MS_SequenceNodeOfSequenceOfExecFile.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class Standard_NoSuchObject;
class Standard_OutOfRange;
class MS_ExecFile;
class MS_SequenceNodeOfSequenceOfExecFile;



class MS_SequenceOfExecFile  : public TCollection_BaseSequence {
public:

  void* operator new(size_t,void* anAddress) 
  {
    return anAddress;
  }
  void* operator new(size_t size) 
  {
    return Standard::Allocate(size); 
  }
  void  operator delete(void *anAddress) 
  {
    if (anAddress) Standard::Free((Standard_Address&)anAddress); 
  }

  
      MS_SequenceOfExecFile();
  
  Standard_EXPORT     void Clear() ;
~MS_SequenceOfExecFile()
{
  Clear();
}
  
  Standard_EXPORT    const MS_SequenceOfExecFile& Assign(const MS_SequenceOfExecFile& Other) ;
   const MS_SequenceOfExecFile& operator =(const MS_SequenceOfExecFile& Other) 
{
  return Assign(Other);
}
  
  Standard_EXPORT     void Append(const Handle(MS_ExecFile)& T) ;
  
        void Append(MS_SequenceOfExecFile& S) ;
  
  Standard_EXPORT     void Prepend(const Handle(MS_ExecFile)& T) ;
  
        void Prepend(MS_SequenceOfExecFile& S) ;
  
        void InsertBefore(const Standard_Integer Index,const Handle(MS_ExecFile)& T) ;
  
        void InsertBefore(const Standard_Integer Index,MS_SequenceOfExecFile& S) ;
  
  Standard_EXPORT     void InsertAfter(const Standard_Integer Index,const Handle(MS_ExecFile)& T) ;
  
        void InsertAfter(const Standard_Integer Index,MS_SequenceOfExecFile& S) ;
  
  Standard_EXPORT    const Handle_MS_ExecFile& First() const;
  
  Standard_EXPORT    const Handle_MS_ExecFile& Last() const;
  
        void Split(const Standard_Integer Index,MS_SequenceOfExecFile& Sub) ;
  
  Standard_EXPORT    const Handle_MS_ExecFile& Value(const Standard_Integer Index) const;
   const Handle_MS_ExecFile& operator()(const Standard_Integer Index) const
{
  return Value(Index);
}
  
  Standard_EXPORT     void SetValue(const Standard_Integer Index,const Handle(MS_ExecFile)& I) ;
  
  Standard_EXPORT     Handle_MS_ExecFile& ChangeValue(const Standard_Integer Index) ;
    Handle_MS_ExecFile& operator()(const Standard_Integer Index) 
{
  return ChangeValue(Index);
}
  
  Standard_EXPORT     void Remove(const Standard_Integer Index) ;
  
  Standard_EXPORT     void Remove(const Standard_Integer FromIndex,const Standard_Integer ToIndex) ;





protected:





private:

  
  Standard_EXPORT   MS_SequenceOfExecFile(const MS_SequenceOfExecFile& Other);




};

#define SeqItem Handle_MS_ExecFile
#define SeqItem_hxx <MS_ExecFile.hxx>
#define TCollection_SequenceNode MS_SequenceNodeOfSequenceOfExecFile
#define TCollection_SequenceNode_hxx <MS_SequenceNodeOfSequenceOfExecFile.hxx>
#define Handle_TCollection_SequenceNode Handle_MS_SequenceNodeOfSequenceOfExecFile
#define TCollection_SequenceNode_Type_() MS_SequenceNodeOfSequenceOfExecFile_Type_()
#define TCollection_Sequence MS_SequenceOfExecFile
#define TCollection_Sequence_hxx <MS_SequenceOfExecFile.hxx>

#include <TCollection_Sequence.lxx>

#undef SeqItem
#undef SeqItem_hxx
#undef TCollection_SequenceNode
#undef TCollection_SequenceNode_hxx
#undef Handle_TCollection_SequenceNode
#undef TCollection_SequenceNode_Type_
#undef TCollection_Sequence
#undef TCollection_Sequence_hxx


// other Inline functions and methods (like "C++: function call" methods)


#endif
