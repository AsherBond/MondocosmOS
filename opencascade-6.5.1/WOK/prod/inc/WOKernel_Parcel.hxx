// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _WOKernel_Parcel_HeaderFile
#define _WOKernel_Parcel_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_WOKernel_Parcel_HeaderFile
#include <Handle_WOKernel_Parcel.hxx>
#endif

#ifndef _Handle_TCollection_HAsciiString_HeaderFile
#include <Handle_TCollection_HAsciiString.hxx>
#endif
#ifndef _WOKernel_UnitNesting_HeaderFile
#include <WOKernel_UnitNesting.hxx>
#endif
#ifndef _Handle_WOKernel_Warehouse_HeaderFile
#include <Handle_WOKernel_Warehouse.hxx>
#endif
#ifndef _Handle_TColStd_HSequenceOfHAsciiString_HeaderFile
#include <Handle_TColStd_HSequenceOfHAsciiString.hxx>
#endif
#ifndef _Handle_WOKernel_File_HeaderFile
#include <Handle_WOKernel_File.hxx>
#endif
class TCollection_HAsciiString;
class WOKernel_Warehouse;
class TColStd_HSequenceOfHAsciiString;
class WOKernel_File;


//! A parcel is  a set of development Units  delivered <br>
//!          from a team to another <br>
class WOKernel_Parcel : public WOKernel_UnitNesting {

public:

  
  Standard_EXPORT   WOKernel_Parcel(const Handle(TCollection_HAsciiString)& aname,const Handle(WOKernel_Warehouse)& anesting);
  
  Standard_EXPORT   virtual  Handle_TCollection_HAsciiString EntityCode() const;
  
  Standard_EXPORT     Handle_TCollection_HAsciiString Delivery() const;
  
  Standard_EXPORT   virtual  void Open() ;
  
  Standard_EXPORT   virtual  void Close() ;




  DEFINE_STANDARD_RTTI(WOKernel_Parcel)

protected:




private: 

  
  Standard_EXPORT   virtual  Handle_TColStd_HSequenceOfHAsciiString GetUnitList() ;
  
  Standard_EXPORT   virtual  Handle_WOKernel_File GetUnitListFile() const;

Handle_TCollection_HAsciiString mydelivery;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
