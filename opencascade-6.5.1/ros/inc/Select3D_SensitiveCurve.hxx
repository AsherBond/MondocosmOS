// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Select3D_SensitiveCurve_HeaderFile
#define _Select3D_SensitiveCurve_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Select3D_SensitiveCurve_HeaderFile
#include <Handle_Select3D_SensitiveCurve.hxx>
#endif

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Select3D_SensitivePoly_HeaderFile
#include <Select3D_SensitivePoly.hxx>
#endif
#ifndef _Handle_SelectBasics_EntityOwner_HeaderFile
#include <Handle_SelectBasics_EntityOwner.hxx>
#endif
#ifndef _Handle_Geom_Curve_HeaderFile
#include <Handle_Geom_Curve.hxx>
#endif
#ifndef _Handle_TColgp_HArray1OfPnt_HeaderFile
#include <Handle_TColgp_HArray1OfPnt.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_OStream_HeaderFile
#include <Standard_OStream.hxx>
#endif
class SelectBasics_EntityOwner;
class Geom_Curve;
class TColgp_HArray1OfPnt;
class TColgp_Array1OfPnt;
class TColgp_Array1OfPnt2d;
class Bnd_Box2d;
class gp_Lin;


//! A framework to define a sensitive 3D curve. <br>
class Select3D_SensitiveCurve : public Select3D_SensitivePoly {

public:

  //! Constructs a sensitive curve object defined by the <br>
//! owner OwnerId, the curve TheCurve, and the <br>
//! maximum number of points on the curve: MaxPoints. <br>
  Standard_EXPORT   Select3D_SensitiveCurve(const Handle(SelectBasics_EntityOwner)& OwnerId,const Handle(Geom_Curve)& TheCurve,const Standard_Integer MaxPoints = 17);
  //! Constructs a sensitive curve object defined by the <br>
//! owner OwnerId and the set of points ThePoints. <br>
  Standard_EXPORT   Select3D_SensitiveCurve(const Handle(SelectBasics_EntityOwner)& OwnerId,const Handle(TColgp_HArray1OfPnt)& ThePoints);
  //! Creation of Sensitive Curve from Points. <br>
//!          Warning : This Method should disappear in the next version... <br>
  Standard_EXPORT   Select3D_SensitiveCurve(const Handle(SelectBasics_EntityOwner)& OwnerId,const TColgp_Array1OfPnt& ThePoints);
  
  Standard_EXPORT     Standard_Boolean Matches(const Standard_Real X,const Standard_Real Y,const Standard_Real aTol,Standard_Real& DMin) ;
  
  Standard_EXPORT     Standard_Boolean Matches(const Standard_Real XMin,const Standard_Real YMin,const Standard_Real XMax,const Standard_Real YMax,const Standard_Real aTol) ;
  
  Standard_EXPORT   virtual  Standard_Boolean Matches(const TColgp_Array1OfPnt2d& Polyline,const Bnd_Box2d& aBox,const Standard_Real aTol) ;
  
  Standard_EXPORT     Standard_Real ComputeDepth(const gp_Lin& EyeLine) const;
  //! Gets index of last detected segment <br>
        Standard_Integer GetLastDetected() const;
  
  Standard_EXPORT   virtual  void Dump(Standard_OStream& S,const Standard_Boolean FullDump = Standard_True) const;




  DEFINE_STANDARD_RTTI(Select3D_SensitiveCurve)

protected:




private: 

  
  Standard_EXPORT     void LoadPoints(const Handle(Geom_Curve)& aCurve,const Standard_Integer NbPoints) ;

Standard_Integer mylastseg;


};


#include <Select3D_SensitiveCurve.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
