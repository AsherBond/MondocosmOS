#include <Storage_Data.hxx>
#include <Storage_InternalData.hxx>
#include <Storage_BaseDriver.hxx>


inline void Storage_Schema::WritePersistentObjectHeader(const Handle(Standard_Persistent)& sp,Storage_BaseDriver& f) 
{
  f.WritePersistentObjectHeader(sp->_refnum,sp->_typenum);
}

inline void Storage_Schema::ReadPersistentObjectHeader(Storage_BaseDriver& f) 
{
  Standard_Integer i,j;

  f.ReadPersistentObjectHeader(i,j);
}

inline Standard_Boolean Storage_Schema::HasTypeBinding(const TCollection_AsciiString& aTypeName) const
{
  return Storage_Schema::ICurrentData()->InternalData()->myTypeBinding.IsBound(aTypeName);
}

inline void Storage_Schema::WritePersistentReference(const Handle(Standard_Persistent)& sp,Storage_BaseDriver& f) 
{
  if (!sp.IsNull()) {
    f.PutReference(sp->_refnum);
  }
  else {
    f.PutReference(0);
  }
}

