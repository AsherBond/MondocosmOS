// File:	BRepBlend_HCurve2dToolGen.lxx
// Created:	Thu Oct 22 12:14:59 1992
// Author:	Laurent BUCHARD
//		<lbr@sdsun2>


#include CurveGen_hxx

#include <GeomAbs_CurveType.hxx>
#include <GeomAbs_Shape.hxx>

#include <gp_Vec2d.hxx>
#include <gp_Lin2d.hxx>
#include <gp_Circ2d.hxx>
#include <gp_Elips2d.hxx>
#include <gp_Parab2d.hxx>
#include <gp_Hypr2d.hxx>


#include <Handle_Geom2d_BezierCurve.hxx>
#include <Handle_Geom2d_BSplineCurve.hxx>

#include <TColStd_Array1OfReal.hxx>

//============================================================
inline Standard_Real BRepBlend_HCurve2dToolGen::FirstParameter (const CurveGen& C) {
  return(C->FirstParameter());
}
//============================================================
inline Standard_Real BRepBlend_HCurve2dToolGen::LastParameter (const CurveGen& C) {
  return(C->LastParameter());
}
//============================================================
inline GeomAbs_Shape BRepBlend_HCurve2dToolGen::Continuity (const CurveGen& C) {
  return(C->Continuity());
}
//============================================================
inline Standard_Integer BRepBlend_HCurve2dToolGen::NbIntervals(const CurveGen& C,const GeomAbs_Shape Sh) {
  return(C->NbIntervals(Sh));
}
//============================================================
inline void BRepBlend_HCurve2dToolGen::Intervals(const CurveGen& C,
							     TColStd_Array1OfReal& Tab,
							     const GeomAbs_Shape Sh) {
  C->Intervals(Tab,Sh);
}
//============================================================
inline Standard_Boolean BRepBlend_HCurve2dToolGen::IsClosed(const CurveGen& C) {
  return(C->IsClosed());
}
//============================================================
inline Standard_Boolean BRepBlend_HCurve2dToolGen::IsPeriodic(const CurveGen& C) {
  return(C->IsPeriodic());
}
//============================================================
inline Standard_Real BRepBlend_HCurve2dToolGen::Period(const CurveGen& C) {
  return(C->Period());
}
//============================================================
inline gp_Pnt2d BRepBlend_HCurve2dToolGen::Value (const CurveGen& C,
						const Standard_Real U) {
  return(C->Value(U));
}
//============================================================
inline void BRepBlend_HCurve2dToolGen::D0(const CurveGen& C,
					  const Standard_Real U,
					  gp_Pnt2d& P) {
  C->D0(U,P);
}
//============================================================
inline void BRepBlend_HCurve2dToolGen::D1 (const CurveGen& C,
					   const Standard_Real U,
					   gp_Pnt2d& P,
					   gp_Vec2d& T) {
  C->D1(U,P,T);
}
//============================================================
inline void BRepBlend_HCurve2dToolGen::D2 (const CurveGen& C,
					   const Standard_Real U,
					   gp_Pnt2d& P,
					   gp_Vec2d& T,
					   gp_Vec2d& N) {
  
  C->D2(U,P,T,N);
}
//============================================================
inline void BRepBlend_HCurve2dToolGen::D3 (const CurveGen& C,
					   const Standard_Real U,
					   gp_Pnt2d& P,
					   gp_Vec2d& V1,
					   gp_Vec2d& V2,
					   gp_Vec2d& V3) {
  
  C->D3(U,P,V1,V2,V3);
}
//============================================================
inline gp_Vec2d BRepBlend_HCurve2dToolGen::DN (const CurveGen& C,
					     const Standard_Real U,
					     const Standard_Integer N) { 
  
  return(C->DN(U,N));
}
//============================================================
inline Standard_Real BRepBlend_HCurve2dToolGen::Resolution(const CurveGen& C,
							   const Standard_Real R3d) {
  return(C->Resolution(R3d));
}
//============================================================
inline GeomAbs_CurveType BRepBlend_HCurve2dToolGen::GetType(const CurveGen& C) {
  return(C->GetType());
}
//============================================================
inline gp_Lin2d BRepBlend_HCurve2dToolGen::Line (const CurveGen& C) {
  return(C->Line());
}
//============================================================
inline gp_Circ2d BRepBlend_HCurve2dToolGen::Circle (const CurveGen& C) {
  return(C->Circle());
}
//============================================================
inline gp_Elips2d BRepBlend_HCurve2dToolGen::Ellipse (const CurveGen& C) {
  return(C->Ellipse());
}
//============================================================
inline gp_Parab2d BRepBlend_HCurve2dToolGen::Parabola (const CurveGen& C) {
  return(C->Parabola());
}
//============================================================
inline gp_Hypr2d BRepBlend_HCurve2dToolGen::Hyperbola (const CurveGen& C) {
  return(C->Hyperbola());
}
//============================================================
inline Handle(Geom2d_BezierCurve) BRepBlend_HCurve2dToolGen::Bezier (const CurveGen& C) {
  return(C->Bezier());
}
//============================================================
inline Handle(Geom2d_BSplineCurve) BRepBlend_HCurve2dToolGen::BSpline (const CurveGen& C) {
  return(C->BSpline());
}
//============================================================














