
#include <Standard_Failure.hxx>
#include <gp.hxx>
#include <Geom2d_Line.hxx>
#include <GeomAbs_CurveType.hxx>
#include <Geom2d_Circle.hxx>
#include <Geom2d_Ellipse.hxx>
#include <Geom2d_Parabola.hxx>
#include <Geom2d_Hyperbola.hxx>
#include <Extrema_POnCurv2d.hxx>
#include <gp_Vec.hxx>


#include <Geom2d_BezierCurve.hxx>
#include <Geom2d_BSplineCurve.hxx>


GeomAbs_CurveType GccGeo_CurvePGTool::
  TheType(const TheParGenCurve& ) {
  return GeomAbs_OtherCurve;
}

gp_Lin2d GccGeo_CurvePGTool::
  Line (const TheParGenCurve& ) {
  cout << "Not implemented" << endl;
  return gp_Lin2d();
}

gp_Circ2d GccGeo_CurvePGTool::
  Circle (const TheParGenCurve& ) {
  cout << "Not implemented" << endl;
  return gp_Circ2d();
}

gp_Elips2d GccGeo_CurvePGTool::
  Ellipse (const TheParGenCurve& ) {
  cout << "Not implemented" << endl;
  return gp_Elips2d();
}

gp_Parab2d GccGeo_CurvePGTool::
  Parabola (const TheParGenCurve& ) {
  cout << "Not implemented" << endl;
  return gp_Parab2d();
}

gp_Hypr2d GccGeo_CurvePGTool::
  Hyperbola (const TheParGenCurve& ) {
  cout << "Not implemented" << endl;
  return gp_Hypr2d();
}

Standard_Real 
  GccGeo_CurvePGTool::EpsX (const TheParGenCurve& /*C*/,
			    const Standard_Real   Tol) {
  return Tol;
}

Standard_Integer 
  GccGeo_CurvePGTool::NbSamples (const TheParGenCurve& C) {
  GeomAbs_CurveType typC = C.GetType();
  Standard_Integer nbs = 20;
  if(typC == GeomAbs_Line) 
    nbs = 2;
  else if(typC == GeomAbs_BezierCurve) 
    nbs = 3 + C.Bezier()->NbPoles();
  else if(typC == GeomAbs_BSplineCurve) { 
    Handle(Geom2d_BSplineCurve) BSC = C.BSpline();
    nbs = BSC->NbKnots();
    nbs*= BSC->Degree();
    if(nbs < 2) nbs=2;
  }
  return(nbs);
}

Standard_Real 
  GccGeo_CurvePGTool::FirstParameter (const TheParGenCurve& C) {
  return C.FirstParameter();
}

Standard_Real 
  GccGeo_CurvePGTool::LastParameter (const TheParGenCurve& C) {
  return C.LastParameter();
}

gp_Pnt2d 
  GccGeo_CurvePGTool::Value (const TheParGenCurve& C,
			     const Standard_Real   U) {
    
  return C.Value(U);
}

void GccGeo_CurvePGTool::D1(const TheParGenCurve& C,
			    const Standard_Real   U,
                                  gp_Pnt2d&       P,
			          gp_Vec2d&       T) {
  C.D1(U,P,T);
}

void GccGeo_CurvePGTool::D2(const TheParGenCurve& C,
			    const Standard_Real U,
			          gp_Pnt2d&     P,
			          gp_Vec2d&     T,
			          gp_Vec2d&     N) {
  C.D2(U,P,T,N);
}

Standard_Boolean GccGeo_CurvePGTool::
  IsComposite (const TheParGenCurve& ) {
  return Standard_False;
}

Standard_Integer GccGeo_CurvePGTool::
  GetIntervals (const TheParGenCurve& ) {
  cout << "Not implemented" << endl;
  return 0;
}

void GccGeo_CurvePGTool::
  GetInterval (const TheParGenCurve&    ,
	       const Standard_Integer   ,
	             Standard_Real&     ,
	             Standard_Real&     ) {
  cout << "Not implemented" << endl;
}

void GccGeo_CurvePGTool::
  SetCurrentInterval (      TheParGenCurve&   ,
		      const Standard_Integer  ) {
  cout << "Not implemented" << endl;
}




