// File:      Message_Messenger.lxx
// Created:   29.06.07 09:19:08
// Author:    OCC Team
// Copyright: Open CASCADE S.A. 2007

#include <Message_Messenger.hxx>

//=======================================================================
//function : GetPrinters
//purpose  : 
//=======================================================================

inline const Message_SequenceOfPrinters& Message_Messenger::Printers() const
{
  return myPrinters;
}

//=======================================================================
//function : GetPrinters
//purpose  : 
//=======================================================================

inline Message_SequenceOfPrinters& Message_Messenger::ChangePrinters()
{
  return myPrinters;
}

//=======================================================================
//function : operator <<
//purpose  : 
//=======================================================================

#ifndef _TCollection_HAsciiString_HeaderFile
#include <TCollection_HAsciiString.hxx>
#endif
#ifndef _TCollection_HExtendedString_HeaderFile
#include <TCollection_HExtendedString.hxx>
#endif

// CString
inline const Handle(Message_Messenger)&
       operator << (const Handle(Message_Messenger)& theMessenger,
                    const Standard_CString theStr)
{
  theMessenger->Send (theStr, Message_Info, Standard_False);
  return theMessenger;
}

// const char* (not the same as const CString which is char const*)
/*
inline const Handle(Message_Messenger)&
       operator << (const Handle(Message_Messenger)& theMessenger,
                    const char* theStr)
{
  theMessenger->Send ((Standard_CString)theStr, Message_Info, Standard_False);
  return theMessenger;
}
*/
// AsciiString
inline const Handle(Message_Messenger)&
       operator << (const Handle(Message_Messenger)& theMessenger,
                    const TCollection_AsciiString& theStr)
{
  theMessenger->Send (theStr, Message_Info, Standard_False);
  return theMessenger;
}

// HAsciiString
inline const Handle(Message_Messenger)&
       operator << (const Handle(Message_Messenger)& theMessenger,
                    const Handle(TCollection_HAsciiString)& theStr)
{
  theMessenger->Send (theStr->String(), Message_Info, Standard_False);
  return theMessenger;
}

// ExtendedString
inline const Handle(Message_Messenger)&
       operator << (const Handle(Message_Messenger)& theMessenger,
                    const TCollection_ExtendedString& theStr)
{
  theMessenger->Send (theStr, Message_Info, Standard_False);
  return theMessenger;
}

// HExtendedString
inline const Handle(Message_Messenger)&
       operator << (const Handle(Message_Messenger)& theMessenger,
                    const Handle(TCollection_HExtendedString)& theStr)
{
  theMessenger->Send (theStr->String(), Message_Info, Standard_False);
  return theMessenger;
}

// Integer
inline const Handle(Message_Messenger)&
       operator << (const Handle(Message_Messenger)& theMessenger,
                    const Standard_Integer theVal)
{
  TCollection_AsciiString aStr (theVal);
  theMessenger->Send (aStr, Message_Info, Standard_False);
  return theMessenger;
}

// Real
inline const Handle(Message_Messenger)&
       operator << (const Handle(Message_Messenger)& theMessenger,
                    const Standard_Real theVal)
{
  TCollection_AsciiString aStr (theVal);
  theMessenger->Send (aStr, Message_Info, Standard_False);
  return theMessenger;
}

// Stream
inline const Handle(Message_Messenger)&
       operator << (const Handle(Message_Messenger)& theMessenger,
                    const Standard_SStream& theStream)
{
#ifdef USE_STL_STREAM
  theMessenger->Send (theStream.str().c_str(), Message_Info, Standard_False);
#else
  // Note: use dirty tricks -- unavoidable with old streams 
  TCollection_AsciiString aStr (((Standard_SStream&)theStream).str(), theStream.pcount());
  theMessenger->Send (aStr, Message_Info, Standard_False);
  ((Standard_SStream&)theStream).freeze (false);
#endif
  return theMessenger;
}

// manipulators
inline const Handle(Message_Messenger)&
       operator << (const Handle(Message_Messenger)& theMessenger,
                    const Handle(Message_Messenger)& (*pman) (const Handle(Message_Messenger)&))
{
  return pman (theMessenger);
}

// endl
inline const Handle(Message_Messenger)& endl (const Handle(Message_Messenger)& theMessenger)
{
  theMessenger->Send ("", Message_Info, Standard_True);
  return theMessenger;
}
