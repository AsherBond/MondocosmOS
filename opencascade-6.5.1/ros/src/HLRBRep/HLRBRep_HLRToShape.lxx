// File:	HLRBRep_HLRToShape.lxx
// Created:	Tue Nov  2 15:55:51 1993
// Author:	Christophe MARION
//		<cma@nonox>

#include <TopoDS_Shape.hxx>

//=======================================================================
//function : VCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape HLRBRep_HLRToShape::VCompound()
{ return InternalCompound(5,Standard_True,TopoDS_Shape()); }

//=======================================================================
//function : VCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape
HLRBRep_HLRToShape::VCompound(const TopoDS_Shape& S)
{ return InternalCompound(5,Standard_True,S); }

//=======================================================================
//function : Rg1LineVCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape HLRBRep_HLRToShape::Rg1LineVCompound()
{ return InternalCompound(3,Standard_True,TopoDS_Shape()); }

//=======================================================================
//function : Rg1LineVCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape
HLRBRep_HLRToShape::Rg1LineVCompound(const TopoDS_Shape& S)
{ return InternalCompound(3,Standard_True,S); }

//=======================================================================
//function : RgNLineVCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape HLRBRep_HLRToShape::RgNLineVCompound()
{ return InternalCompound(4,Standard_True,TopoDS_Shape()); }

//=======================================================================
//function : RgNLineVCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape
HLRBRep_HLRToShape::RgNLineVCompound(const TopoDS_Shape& S)
{ return InternalCompound(4,Standard_True,S); }

//=======================================================================
//function : OutLineVCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape HLRBRep_HLRToShape::OutLineVCompound()
{ return InternalCompound(2,Standard_True,TopoDS_Shape()); }

//=======================================================================
//function : OutLineVCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape
HLRBRep_HLRToShape::OutLineVCompound(const TopoDS_Shape& S)
{ return InternalCompound(2,Standard_True,S); }

//=======================================================================
//function : IsoLineVCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape HLRBRep_HLRToShape::IsoLineVCompound()
{ return InternalCompound(1,Standard_True,TopoDS_Shape()); }

//=======================================================================
//function : IsoLineVCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape
HLRBRep_HLRToShape::IsoLineVCompound(const TopoDS_Shape& S)
{ return InternalCompound(1,Standard_True,S); }

//=======================================================================
//function : HCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape HLRBRep_HLRToShape::HCompound()
{ return InternalCompound(5,Standard_False,TopoDS_Shape()); }

//=======================================================================
//function : HCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape
HLRBRep_HLRToShape::HCompound(const TopoDS_Shape& S)
{ return InternalCompound(5,Standard_False,S); }

//=======================================================================
//function : Rg1LineHCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape HLRBRep_HLRToShape::Rg1LineHCompound()
{ return InternalCompound(3,Standard_False,TopoDS_Shape()); }

//=======================================================================
//function : Rg1LineHCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape 
HLRBRep_HLRToShape::Rg1LineHCompound(const TopoDS_Shape& S)
{ return InternalCompound(3,Standard_False,S); }

//=======================================================================
//function : RgNLineHCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape HLRBRep_HLRToShape::RgNLineHCompound()
{ return InternalCompound(4,Standard_False,TopoDS_Shape()); }

//=======================================================================
//function : RgNLineHCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape
HLRBRep_HLRToShape::RgNLineHCompound(const TopoDS_Shape& S)
{ return InternalCompound(4,Standard_False,S); }

//=======================================================================
//function : OutLineHCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape HLRBRep_HLRToShape::OutLineHCompound()
{ return InternalCompound(2,Standard_False,TopoDS_Shape()); }

//=======================================================================
//function : OutLineHCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape
HLRBRep_HLRToShape::OutLineHCompound(const TopoDS_Shape& S)
{ return InternalCompound(2,Standard_False,S); }

//=======================================================================
//function : IsoLineHCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape HLRBRep_HLRToShape::IsoLineHCompound()
{ return InternalCompound(1,Standard_False,TopoDS_Shape()); }

//=======================================================================
//function : IsoLineHCompound
//purpose  : 
//=======================================================================

inline TopoDS_Shape
HLRBRep_HLRToShape::IsoLineHCompound(const TopoDS_Shape& S)
{ return InternalCompound(1,Standard_False,S); }

