// File:	TCollection_Sequence.lxx
// Created:	Tue Dec 22 11:38:15 1992
// Author:	Remi LEQUETTE
//		<rle@phobox>

//=======================================================================
//function : Empty constructor
//purpose  : 
//=======================================================================

inline TCollection_Sequence::TCollection_Sequence()
{
}

//=======================================================================
//function : Append 
//purpose  : Appends a Sequence to myself
//=======================================================================
inline void  TCollection_Sequence::Append (TCollection_Sequence& S)
{
  if (FirstItem == S.FirstItem) Assign(S);
  PAppend (S);
}

//=======================================================================
//function : Prepend 
//purpose  : Prepends a Sequence to myself
//=======================================================================
inline void TCollection_Sequence::Prepend (TCollection_Sequence& S)
{
  if (FirstItem == S.FirstItem) Assign(S);
  PPrepend (S);
}
//=======================================================================
//function : InsertBefore
//purpose  : Inserts an item before an index
//=======================================================================
inline void TCollection_Sequence::InsertBefore (const Standard_Integer Index,
						const SeqItem& I)
{
  InsertAfter(Index-1,I);
}

//=======================================================================
//function : InsertBefore
//purpose  : Inserts a Sequence before an index
//=======================================================================
inline void TCollection_Sequence::InsertBefore (const Standard_Integer Index,
					         TCollection_Sequence& S)
{
  InsertAfter(Index-1,S);
}

//=======================================================================
//function : InsertAfter
//purpose  : Inserts a Sequence after an index
//=======================================================================
inline void TCollection_Sequence::InsertAfter (const Standard_Integer Index,
					       TCollection_Sequence& S)
{
  PInsertAfter(Index,S);
}

//=======================================================================
//function : Split
//purpose  : Cuts a Sequence into two
//=======================================================================
inline void TCollection_Sequence::Split (const Standard_Integer Index,
					  TCollection_Sequence& S)
{
  S.Clear();
  PSplit(Index,S);
}







