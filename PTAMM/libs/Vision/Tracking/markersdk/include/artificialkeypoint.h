#pragma once

#include "artificialfeature.h"

namespace FeatureSpace
{
	//////////////////////////////////////////////////////////////////////////
	/// \ingroup Marker
	/// \brief The preprocessed keypoint, with pattern and 3D information.
	///
	/// We generate 4 keypoints for 1 marker feature, for the marker has 4 corners, i.e. 4 directions.
	//////////////////////////////////////////////////////////////////////////
	class DLL_EXPORT ArtificialKeypoint
	{
	public:
		/// \brief Constructor.
		ArtificialKeypoint();

		/// \brief Copy constructor.
		ArtificialKeypoint(ArtificialKeypoint const & obj);

		/// \brief Assignment operator.
		ArtificialKeypoint& operator=(ArtificialKeypoint const & obj);

		~ArtificialKeypoint();

		//////////////////////////////////////////////////////////////////////////
		/// \brief The pattern image.
		//////////////////////////////////////////////////////////////////////////
		unsigned char *_data;

		//////////////////////////////////////////////////////////////////////////
		/// \brief 4 corners.
		//////////////////////////////////////////////////////////////////////////
		std::vector<d5Point> _corners;

		//////////////////////////////////////////////////////////////////////////
		/// \brief Whether the keypoint is found in the scene.
		//////////////////////////////////////////////////////////////////////////
		bool _found;

		//////////////////////////////////////////////////////////////////////////
		/// \brief The direction which gives the minimum distance.
		//////////////////////////////////////////////////////////////////////////
		int _mindirection;

		//////////////////////////////////////////////////////////////////////////
		/// \brief Ignored potion of the keypoint pattern.
		///
		//////////////////////////////////////////////////////////////////////////
		float _ignore;

		//////////////////////////////////////////////////////////////////////////
		/// \brief The name of the keypoint.
		//////////////////////////////////////////////////////////////////////////
		std::string _name;

		//////////////////////////////////////////////////////////////////////////
		/// \brief Generate keypoint from the image feature.
		//////////////////////////////////////////////////////////////////////////
		bool generate(ArtificialFeature& feature, bool computedistance = true);

		/// \brief Distance to another keypoint.
		float Distance(const ArtificialKeypoint& kp);

		/// \brief Distance to another keypoint.
		float Distance2(const ArtificialKeypoint& kp);

		void Rotate(int direction);
	};
}