/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */
package org.jdesktop.wonderland.testharness.manager.ui;

import java.awt.Color;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import org.jdesktop.wonderland.testharness.manager.common.CommsHandler;
import org.jdesktop.wonderland.testharness.manager.common.SimpleTestDirectorMessage;
import org.jdesktop.wonderland.testharness.manager.common.SimpleTestDirectorMessage.UserActionType;

/**
 *
 * @author paulby
 */
public class UserJPanel extends javax.swing.JPanel {

    private CommsHandler commsHandler;
    private boolean settingAction = false;

    /** Creates new form UserJPanel */
    public UserJPanel(String username, CommsHandler commsHandler) {
        this.commsHandler = commsHandler;
        initComponents();
        userNameL.setText(username);

        UserActionType[] actions = SimpleTestDirectorMessage.UserActionType.values();
        for(UserActionType a : actions) {
            if (!a.toString().startsWith("H_"))
                activityCB.addItem(a);
        }
    }

    public String getUsername() {
        return userNameL.getText();
    }


    /**
     * The client app running as this user has quit
     */
    public void setClientQuit() {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                setBackground(Color.red);
            }
        });
    }

    public void setCurrentAction(UserActionType action) {
        settingAction = true;
        switch(action) {
            case WALK:
                activityCB.setSelectedItem(action);
                break;
            case IDLE :
                activityCB.setSelectedItem(action);
                break;
            case H_QUIT :
                setBackground(Color.red);
                break;
            case H_ERROR :
                break;
        }
        settingAction = false;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userNameL = new javax.swing.JLabel();
        activityCB = new javax.swing.JComboBox();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setMaximumSize(new java.awt.Dimension(108, 67));

        userNameL.setText("jLabel1");

        activityCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activityCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(userNameL))
                    .addComponent(activityCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(userNameL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(activityCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void activityCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activityCBActionPerformed
        switch((UserActionType)activityCB.getSelectedItem()) {
            case WALK :
                this.setBackground(Color.green);
                break;
            case IDLE :
                this.setBackground(Color.yellow);
                break;
        }
        if (settingAction)
            return;
        
        try {
            commsHandler.send(SimpleTestDirectorMessage.newUserActionChangeRequestMessage(userNameL.getText(),(UserActionType) activityCB.getSelectedItem()));
        } catch (IOException ex) {
            Logger.getLogger(UserJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_activityCBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox activityCB;
    private javax.swing.JLabel userNameL;
    // End of variables declaration//GEN-END:variables

}
