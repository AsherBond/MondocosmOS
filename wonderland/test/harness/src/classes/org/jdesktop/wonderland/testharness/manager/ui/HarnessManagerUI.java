/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath" 
 * exception as provided by Sun in the License file that accompanied 
 * this code.
 */
package org.jdesktop.wonderland.testharness.manager.ui;

import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.wonderland.testharness.manager.common.CommsHandler;
import org.jdesktop.wonderland.testharness.manager.common.CommsHandler.MessageListener;
import org.jdesktop.wonderland.testharness.manager.common.ManagerMessage;
import org.jdesktop.wonderland.testharness.manager.common.MasterStatus;
import org.jdesktop.wonderland.testharness.manager.ui.SimpleTestDirectorUI;
import org.jdesktop.wonderland.testharness.master.MasterMain;

public class HarnessManagerUI extends javax.swing.JFrame {
    private ObjectOutputStream out;
    private ObjectInputStream in;

    /** Creates new form HarnessManagerUI */
    public HarnessManagerUI(String args[]) {

        initComponents();
        String masterHostname;

        if (args.length>1) {
            System.err.println("Usage: HarnessManagerUI <master hostname>");
            System.exit(1);
        }

        if (args.length==1)
            masterHostname = args[0];
        else
            masterHostname = "localhost";
        
        try {
            Socket s = new Socket(masterHostname, MasterMain.MANAGER_PORT);
            out = new ObjectOutputStream(s.getOutputStream());
            in = new ObjectInputStream(s.getInputStream());

            MasterConnection con = new MasterConnection(in, out);
            con.start();
            
            directorsPanel.add("Simple Director", new SimpleTestDirectorUI(con));
            pack();
        
        } catch(IOException e) {
            Logger.getAnonymousLogger().log(Level.SEVERE, "Unable to open connection to master", e);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        northPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        activeSlavesTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        passiveSlavesTF = new javax.swing.JTextField();
        centerPanel = new javax.swing.JPanel();
        directorsPanel = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMI = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Active Slaves :");

        activeSlavesTF.setEditable(false);
        activeSlavesTF.setText("-");

        jLabel2.setText("Passive Slaves :");

        passiveSlavesTF.setEditable(false);
        passiveSlavesTF.setText("-");

        org.jdesktop.layout.GroupLayout northPanelLayout = new org.jdesktop.layout.GroupLayout(northPanel);
        northPanel.setLayout(northPanelLayout);
        northPanelLayout.setHorizontalGroup(
            northPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(northPanelLayout.createSequentialGroup()
                .add(18, 18, 18)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(activeSlavesTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(47, 47, 47)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(passiveSlavesTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(158, Short.MAX_VALUE))
        );
        northPanelLayout.setVerticalGroup(
            northPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(northPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(northPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jLabel2)
                    .add(activeSlavesTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(passiveSlavesTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        getContentPane().add(northPanel, java.awt.BorderLayout.NORTH);

        centerPanel.setLayout(new java.awt.BorderLayout());
        centerPanel.add(directorsPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        exitMI.setText("Exit");
        exitMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMIActionPerformed(evt);
            }
        });
        fileMenu.add(exitMI);

        jMenuBar1.add(fileMenu);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void exitMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMIActionPerformed
    System.exit(0);
}//GEN-LAST:event_exitMIActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(final String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HarnessManagerUI(args).setVisible(true);
            }
        });
    }
    
    class MasterConnection extends Thread implements CommsHandler {
        private ObjectInputStream in;
        private ObjectOutputStream out;
        private HashMap<Class, LinkedList<CommsHandler.MessageListener>> messageListeners = new HashMap();
        
        public MasterConnection(ObjectInputStream in, ObjectOutputStream out) {
            this.in = in;
            this.out = out;
            
            addMessageListener(MasterStatus.class, new CommsHandler.MessageListener() {

                public void messageReceived(ManagerMessage message) {
                    if (message instanceof MasterStatus) {
                        activeSlavesTF.setText(Integer.toString(((MasterStatus)message).getActiveSlaves()));
                        passiveSlavesTF.setText(Integer.toString(((MasterStatus)message).getPassiveSlaves()));
                    }
                }
                
            });
        }
        
        @Override
        public void run() {
            ManagerMessage message;
            boolean done=false;
            
            while(!done) {
                try {
                    message = (ManagerMessage) in.readObject();
                    System.out.println("HARNESS received "+message);
                    if (message!=null) {
                        LinkedList<CommsHandler.MessageListener> listeners = messageListeners.get(message.getClass());
                        if (listeners!=null) {
                            for(MessageListener l : listeners)
                                l.messageReceived(message);
                        }
                    }
                } catch(EOFException eofe) {
                    done = true;
                } catch(IOException e) {
                    Logger.getAnonymousLogger().log(Level.SEVERE, "Error reading message ",e);
                } catch(ClassNotFoundException cnfe) {
                    Logger.getAnonymousLogger().log(Level.SEVERE, "Error reading message ",cnfe);                    
                }
            } 
            
            System.err.println("Lost connection to master, exiting....");
            System.exit(0);
        }

        public void send(ManagerMessage message) throws IOException {
            synchronized(out) {
                out.writeObject(message);
            }
        }

        public void addMessageListener(Class msgClass, MessageListener listener) {
            LinkedList<MessageListener> listeners = messageListeners.get(msgClass);
            if (listeners==null) {
                listeners = new LinkedList();
                messageListeners.put(msgClass, listeners);
            }
            listeners.add(listener);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField activeSlavesTF;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JTabbedPane directorsPanel;
    private javax.swing.JMenuItem exitMI;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel northPanel;
    private javax.swing.JTextField passiveSlavesTF;
    // End of variables declaration//GEN-END:variables

}
