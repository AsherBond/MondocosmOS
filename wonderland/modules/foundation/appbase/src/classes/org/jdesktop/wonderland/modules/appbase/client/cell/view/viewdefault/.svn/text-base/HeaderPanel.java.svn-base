/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2010, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */
package org.jdesktop.wonderland.modules.appbase.client.cell.view.viewdefault;

import java.awt.Color;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;

/**
 *
 * @author dj
 */
public class HeaderPanel extends javax.swing.JPanel {

    public interface Container {
        // TODO: add call backs to FrameHeaderSwing

        public void close();

        public void toggleHUD();
    }
    private Container container;
    private static ImageIcon onHUDImage;
    private static ImageIcon offHUDImage;

    public void setContainer(Container container) {
        this.container = container;
    }

    /** Creates new form HeaderPanel */
    public HeaderPanel() {
        initComponents();
 
        closeButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        hudButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hudButtonActionPerformed(evt);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        appLabel = new javax.swing.JLabel();
        controllerLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        hudButton = new javax.swing.JButton();

        jToolBar1.setRollover(true);

        setMaximumSize(new java.awt.Dimension(32767, 24));
        setMinimumSize(new java.awt.Dimension(50, 24));
        setPreferredSize(new java.awt.Dimension(422, 24));

        appLabel.setFont(appLabel.getFont().deriveFont(appLabel.getFont().getStyle() | java.awt.Font.BOLD, appLabel.getFont().getSize()+2));
        appLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        controllerLabel.setFont(controllerLabel.getFont().deriveFont(controllerLabel.getFont().getStyle() | java.awt.Font.BOLD, controllerLabel.getFont().getSize()+2));
        controllerLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        closeButton.setFont(new java.awt.Font("DejaVu Sans", 0, 10));
        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/appbase/client/cell/view/viewdefault/resources/window-close24x24.png"))); // NOI18N
        closeButton.setMaximumSize(new java.awt.Dimension(24, 24));
        closeButton.setMinimumSize(new java.awt.Dimension(24, 24));
        closeButton.setPreferredSize(new java.awt.Dimension(24, 24));
        closeButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/appbase/client/cell/view/viewdefault/resources/window-close24x24.png"))); // NOI18N

        hudButton.setFont(new java.awt.Font("DejaVu Sans", 0, 10));
        hudButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/appbase/client/cell/view/viewdefault/resources/dock24x24.png"))); // NOI18N
        hudButton.setMaximumSize(new java.awt.Dimension(24, 24));
        hudButton.setMinimumSize(new java.awt.Dimension(24, 24));
        hudButton.setPreferredSize(new java.awt.Dimension(24, 24));
        hudButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/appbase/client/cell/view/viewdefault/resources/dock24x24.png"))); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(appLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(controllerLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(hudButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(3, 3, 3)
                .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(appLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(controllerLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(hudButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel appLabel;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel controllerLabel;
    private javax.swing.JButton hudButton;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setBackground(final Color color) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                HeaderPanel.super.setBackground(color);
                if (appLabel != null) {
                    appLabel.setBackground(color);
                }
                if (controllerLabel != null) {
                    controllerLabel.setBackground(color);
                }
                if (closeButton != null) {
                    closeButton.setBackground(color);
                }
                if (hudButton != null) {
                    hudButton.setBackground(color);
                }
            }
        });
    }

    @Override
    public void setForeground(final Color color) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                HeaderPanel.super.setForeground(color);
                if (appLabel != null) {
                    appLabel.setForeground(color);
                }
                if (controllerLabel != null) {
                    controllerLabel.setForeground(color);
                }
                if (closeButton != null) {
                    closeButton.setForeground(color);
                }
                if (hudButton != null) {
                    hudButton.setForeground(color);
                }
            }
        });
    }

    public void showHUDButton(boolean showButton) {
        hudButton.setVisible(showButton);
    }

    @Override
    public void addMouseListener(final MouseListener listener) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                HeaderPanel.super.addMouseListener(listener);
                if (appLabel != null) {
                    appLabel.addMouseListener(listener);
                }
                if (controllerLabel != null) {
                    controllerLabel.addMouseListener(listener);
                }
                if (closeButton != null) {
                    closeButton.addMouseListener(listener);
                }
                if (hudButton != null) {
                    hudButton.addMouseListener(listener);
                }
            }
        });
    }

    @Override
    public void removeMouseListener(final MouseListener listener) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                HeaderPanel.super.removeMouseListener(listener);
                if (appLabel != null) {
                    appLabel.removeMouseListener(listener);
                }
                if (controllerLabel != null) {
                    controllerLabel.removeMouseListener(listener);
                }
                if (closeButton != null) {
                    closeButton.removeMouseListener(listener);
                }
                if (hudButton != null) {
                    hudButton.removeMouseListener(listener);
                }
            }
        });

    }

    @Override
    public void addMouseMotionListener(final MouseMotionListener listener) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                HeaderPanel.super.addMouseMotionListener(listener);
                if (appLabel != null) {
                    appLabel.addMouseMotionListener(listener);
                }
                if (controllerLabel != null) {
                    controllerLabel.addMouseMotionListener(listener);
                }
                if (closeButton != null) {
                    closeButton.addMouseMotionListener(listener);
                }
                if (hudButton != null) {
                    hudButton.addMouseMotionListener(listener);
                }
            }
        });
    }

    @Override
    public void removeMouseMotionListener(final MouseMotionListener listener) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                HeaderPanel.super.removeMouseMotionListener(listener);
                if (appLabel != null) {
                    appLabel.removeMouseMotionListener(listener);
                }
                if (controllerLabel != null) {
                    controllerLabel.removeMouseMotionListener(listener);
                }
                if (closeButton != null) {
                    closeButton.removeMouseMotionListener(listener);
                }
                if (hudButton != null) {
                    hudButton.removeMouseMotionListener(listener);
                }
            }
        });
    }

    public void setTitle(String title) {
        if (title == null) {
            title = " ";
        }
        final String theTitle = title;
        if (appLabel != null) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    appLabel.setText(theTitle);
                }
            });
        }
    }

    public void setController(String controller) {
        if (controller == null) {
            controller = " ";
        }
        final String theController = controller;
        if (appLabel != null) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    controllerLabel.setText(theController);
                }
            });
        }
    }

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (container != null) {
            container.close();
        }
    }

    private void hudButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (container != null) {
            container.toggleHUD();
        }
    }
}
        
