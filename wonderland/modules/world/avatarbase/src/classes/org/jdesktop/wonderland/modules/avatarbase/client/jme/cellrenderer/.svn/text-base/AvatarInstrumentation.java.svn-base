/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */
package org.jdesktop.wonderland.modules.avatarbase.client.jme.cellrenderer;

import imi.utils.instruments.Instrumentation;
import imi.utils.instruments.Instrumentation.InstrumentedSubsystem;
import java.util.ResourceBundle;

/**
 *
 * @author paulby
 */
public class AvatarInstrumentation extends javax.swing.JFrame {
    private static final ResourceBundle bundle = ResourceBundle.getBundle("org/jdesktop/wonderland/modules/avatarbase/client/resources/Bundle");

    private Instrumentation instrumentation;

    /** Creates new form AvatarInstrumentation */
    public AvatarInstrumentation(Instrumentation instrumenation) {
        this.instrumentation = instrumenation;
        initComponents();
        animationCB.setSelected(instrumentation.isSubsystemEnabled(InstrumentedSubsystem.AnimationSystem));
        texturingCB.setSelected(instrumentation.isSubsystemEnabled(InstrumentedSubsystem.Texturing));
        vertexDefB.setSelected(instrumentation.isSubsystemEnabled(InstrumentedSubsystem.VertexDeformation));
        poseToGpuCB.setSelected(instrumentation.isSubsystemEnabled(InstrumentedSubsystem.PoseTransferToGPU));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        animationCB = new javax.swing.JCheckBox();
        texturingCB = new javax.swing.JCheckBox();
        vertexDefB = new javax.swing.JCheckBox();
        poseToGpuCB = new javax.swing.JCheckBox();

        jLabel1.setText(bundle.getString("Enabled_Subsystems")); // NOI18N

        animationCB.setSelected(true);
        animationCB.setText(bundle.getString("Animation")); // NOI18N
        animationCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animationCBActionPerformed(evt);
            }
        });

        texturingCB.setSelected(true);
        texturingCB.setText(bundle.getString("Texturing")); // NOI18N
        texturingCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texturingCBActionPerformed(evt);
            }
        });

        vertexDefB.setSelected(true);
        vertexDefB.setText(bundle.getString("Vertex_Deformation")); // NOI18N
        vertexDefB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vertexDefBActionPerformed(evt);
            }
        });

        poseToGpuCB.setSelected(true);
        poseToGpuCB.setText(bundle.getString("Pose_Transfer_to_GPU")); // NOI18N
        poseToGpuCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poseToGpuCBActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(animationCB)
                    .add(jLabel1)
                    .add(texturingCB)
                    .add(vertexDefB)
                    .add(poseToGpuCB))
                .addContainerGap(231, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(18, 18, 18)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(animationCB)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(texturingCB)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(vertexDefB)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(poseToGpuCB)
                .addContainerGap(150, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void animationCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animationCBActionPerformed
        if (animationCB.isSelected())
            instrumentation.enableSubsystem(InstrumentedSubsystem.AnimationSystem);
        else
            instrumentation.disableSubsytem(InstrumentedSubsystem.AnimationSystem);
    }//GEN-LAST:event_animationCBActionPerformed

    private void texturingCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texturingCBActionPerformed
        if (texturingCB.isSelected())
            instrumentation.enableSubsystem(InstrumentedSubsystem.Texturing);
        else
            instrumentation.disableSubsytem(InstrumentedSubsystem.Texturing);
    }//GEN-LAST:event_texturingCBActionPerformed

    private void vertexDefBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vertexDefBActionPerformed
        if (vertexDefB.isSelected())
            instrumentation.enableSubsystem(InstrumentedSubsystem.VertexDeformation);
        else
            instrumentation.disableSubsytem(InstrumentedSubsystem.VertexDeformation);

    }//GEN-LAST:event_vertexDefBActionPerformed

    private void poseToGpuCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_poseToGpuCBActionPerformed
        if (poseToGpuCB.isSelected())
            instrumentation.enableSubsystem(InstrumentedSubsystem.PoseTransferToGPU);
        else
            instrumentation.disableSubsytem(InstrumentedSubsystem.PoseTransferToGPU);

    }//GEN-LAST:event_poseToGpuCBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox animationCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JCheckBox poseToGpuCB;
    private javax.swing.JCheckBox texturingCB;
    private javax.swing.JCheckBox vertexDefB;
    // End of variables declaration//GEN-END:variables

}
