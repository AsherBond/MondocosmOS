/****************************************
* Autogenerated shader code follows
*     this is a placeholder header
*         resistance is futile
****************************************/
///////////// VARYING /////////////
varying vec3 ToLight;
varying vec3 VNormal;
varying vec3 ToCamera;

////////////  UNIFORMS ////////////
uniform float specularExponent;
uniform sampler2D NormalMapIndex;
uniform sampler2D DiffuseMapIndex;
uniform float specularComponent;
uniform sampler2D SpecularMapIndex;
uniform float ambientPower;
uniform vec3 materialColor;

///////////// GLOBALS /////////////
vec4 finalColor;
float NdotL;
vec3 FragLocalNormal;

//////////// PROTOTYPES ///////////
void UnlitTexturing_Lighting();
void MeshColorModulation();
void NormalMapping();
void AmbientNdotL_Lighting();
void SpecularMapping_Lighting();

/////////// MAIN LOGIC ////////////
void main(void)
{
	UnlitTexturing_Lighting();
	MeshColorModulation();
	NormalMapping();
	AmbientNdotL_Lighting();
	SpecularMapping_Lighting();

	// Now commit the changes
	gl_FragColor = finalColor;
}

/******************************************
* Function: UnlitTexturing_Lighting
*******************************************/
void UnlitTexturing_Lighting()
{
	finalColor = texture2D(DiffuseMapIndex, gl_TexCoord[0].st);
}

/******************************************
* Function: MeshColorModulation
*******************************************/
void MeshColorModulation()
{
	finalColor *= vec4(materialColor,1.0);
}

/******************************************
* Function: NormalMapping
*******************************************/
void NormalMapping()
{
	FragLocalNormal= normalize(texture2D(NormalMapIndex, gl_TexCoord[0].st).xyz * 2.0 - 1.0);
}

/******************************************
* Function: AmbientNdotL_Lighting
*******************************************/
void AmbientNdotL_Lighting()
{
	float alpha = finalColor.a;
	vec3 lightVec  = normalize(ToLight);
	NdotL = clamp(dot(FragLocalNormal, lightVec), 0.0, 1.0);
	vec4 afterLighting = finalColor * NdotL;
	afterLighting *= (1.0 - ambientPower);
	finalColor = finalColor * ambientPower;
	finalColor += afterLighting;
	finalColor.a = alpha;
}

/******************************************
* Function: SpecularMapping_Lighting
*******************************************/
void SpecularMapping_Lighting()
{
	float NdotHV;if (NdotL > 0.0) { NdotHV = max(dot(FragLocalNormal, gl_LightSource[0].halfVector.xyz), 0.0);
		 vec4 specularComponent = gl_FrontMaterial.specular * gl_LightSource[0].specular *
		       pow(NdotHV, gl_FrontMaterial.shininess);
	};
}